/*
 * Ory Hydra API
 *
 * Documentation for all of Ory Hydra's APIs.
 *
 * API version: 1.0.0
 * Contact: hi@ory.sh
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// IDTokenClaims IDTokenClaims represent the claims used in open id connect requests
type IDTokenClaims struct {
	AccessTokenHash                     *string                           `json:"AccessTokenHash,omitempty"`
	Audience                            []string                          `json:"Audience,omitempty"`
	AuthTime                            *time.Time                        `json:"AuthTime,omitempty"`
	AuthenticationContextClassReference *string                           `json:"AuthenticationContextClassReference,omitempty"`
	AuthenticationMethodsReferences     []string                          `json:"AuthenticationMethodsReferences,omitempty"`
	CodeHash                            *string                           `json:"CodeHash,omitempty"`
	ExpiresAt                           *time.Time                        `json:"ExpiresAt,omitempty"`
	Extra                               map[string]map[string]interface{} `json:"Extra,omitempty"`
	IssuedAt                            *time.Time                        `json:"IssuedAt,omitempty"`
	Issuer                              *string                           `json:"Issuer,omitempty"`
	JTI                                 *string                           `json:"JTI,omitempty"`
	Nonce                               *string                           `json:"Nonce,omitempty"`
	RequestedAt                         *time.Time                        `json:"RequestedAt,omitempty"`
	Subject                             *string                           `json:"Subject,omitempty"`
}

// NewIDTokenClaims instantiates a new IDTokenClaims object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIDTokenClaims() *IDTokenClaims {
	this := IDTokenClaims{}
	return &this
}

// NewIDTokenClaimsWithDefaults instantiates a new IDTokenClaims object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIDTokenClaimsWithDefaults() *IDTokenClaims {
	this := IDTokenClaims{}
	return &this
}

// GetAccessTokenHash returns the AccessTokenHash field value if set, zero value otherwise.
func (o *IDTokenClaims) GetAccessTokenHash() string {
	if o == nil || o.AccessTokenHash == nil {
		var ret string
		return ret
	}
	return *o.AccessTokenHash
}

// GetAccessTokenHashOk returns a tuple with the AccessTokenHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IDTokenClaims) GetAccessTokenHashOk() (*string, bool) {
	if o == nil || o.AccessTokenHash == nil {
		return nil, false
	}
	return o.AccessTokenHash, true
}

// HasAccessTokenHash returns a boolean if a field has been set.
func (o *IDTokenClaims) HasAccessTokenHash() bool {
	if o != nil && o.AccessTokenHash != nil {
		return true
	}

	return false
}

// SetAccessTokenHash gets a reference to the given string and assigns it to the AccessTokenHash field.
func (o *IDTokenClaims) SetAccessTokenHash(v string) {
	o.AccessTokenHash = &v
}

// GetAudience returns the Audience field value if set, zero value otherwise.
func (o *IDTokenClaims) GetAudience() []string {
	if o == nil || o.Audience == nil {
		var ret []string
		return ret
	}
	return o.Audience
}

// GetAudienceOk returns a tuple with the Audience field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IDTokenClaims) GetAudienceOk() ([]string, bool) {
	if o == nil || o.Audience == nil {
		return nil, false
	}
	return o.Audience, true
}

// HasAudience returns a boolean if a field has been set.
func (o *IDTokenClaims) HasAudience() bool {
	if o != nil && o.Audience != nil {
		return true
	}

	return false
}

// SetAudience gets a reference to the given []string and assigns it to the Audience field.
func (o *IDTokenClaims) SetAudience(v []string) {
	o.Audience = v
}

// GetAuthTime returns the AuthTime field value if set, zero value otherwise.
func (o *IDTokenClaims) GetAuthTime() time.Time {
	if o == nil || o.AuthTime == nil {
		var ret time.Time
		return ret
	}
	return *o.AuthTime
}

// GetAuthTimeOk returns a tuple with the AuthTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IDTokenClaims) GetAuthTimeOk() (*time.Time, bool) {
	if o == nil || o.AuthTime == nil {
		return nil, false
	}
	return o.AuthTime, true
}

// HasAuthTime returns a boolean if a field has been set.
func (o *IDTokenClaims) HasAuthTime() bool {
	if o != nil && o.AuthTime != nil {
		return true
	}

	return false
}

// SetAuthTime gets a reference to the given time.Time and assigns it to the AuthTime field.
func (o *IDTokenClaims) SetAuthTime(v time.Time) {
	o.AuthTime = &v
}

// GetAuthenticationContextClassReference returns the AuthenticationContextClassReference field value if set, zero value otherwise.
func (o *IDTokenClaims) GetAuthenticationContextClassReference() string {
	if o == nil || o.AuthenticationContextClassReference == nil {
		var ret string
		return ret
	}
	return *o.AuthenticationContextClassReference
}

// GetAuthenticationContextClassReferenceOk returns a tuple with the AuthenticationContextClassReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IDTokenClaims) GetAuthenticationContextClassReferenceOk() (*string, bool) {
	if o == nil || o.AuthenticationContextClassReference == nil {
		return nil, false
	}
	return o.AuthenticationContextClassReference, true
}

// HasAuthenticationContextClassReference returns a boolean if a field has been set.
func (o *IDTokenClaims) HasAuthenticationContextClassReference() bool {
	if o != nil && o.AuthenticationContextClassReference != nil {
		return true
	}

	return false
}

// SetAuthenticationContextClassReference gets a reference to the given string and assigns it to the AuthenticationContextClassReference field.
func (o *IDTokenClaims) SetAuthenticationContextClassReference(v string) {
	o.AuthenticationContextClassReference = &v
}

// GetAuthenticationMethodsReferences returns the AuthenticationMethodsReferences field value if set, zero value otherwise.
func (o *IDTokenClaims) GetAuthenticationMethodsReferences() []string {
	if o == nil || o.AuthenticationMethodsReferences == nil {
		var ret []string
		return ret
	}
	return o.AuthenticationMethodsReferences
}

// GetAuthenticationMethodsReferencesOk returns a tuple with the AuthenticationMethodsReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IDTokenClaims) GetAuthenticationMethodsReferencesOk() ([]string, bool) {
	if o == nil || o.AuthenticationMethodsReferences == nil {
		return nil, false
	}
	return o.AuthenticationMethodsReferences, true
}

// HasAuthenticationMethodsReferences returns a boolean if a field has been set.
func (o *IDTokenClaims) HasAuthenticationMethodsReferences() bool {
	if o != nil && o.AuthenticationMethodsReferences != nil {
		return true
	}

	return false
}

// SetAuthenticationMethodsReferences gets a reference to the given []string and assigns it to the AuthenticationMethodsReferences field.
func (o *IDTokenClaims) SetAuthenticationMethodsReferences(v []string) {
	o.AuthenticationMethodsReferences = v
}

// GetCodeHash returns the CodeHash field value if set, zero value otherwise.
func (o *IDTokenClaims) GetCodeHash() string {
	if o == nil || o.CodeHash == nil {
		var ret string
		return ret
	}
	return *o.CodeHash
}

// GetCodeHashOk returns a tuple with the CodeHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IDTokenClaims) GetCodeHashOk() (*string, bool) {
	if o == nil || o.CodeHash == nil {
		return nil, false
	}
	return o.CodeHash, true
}

// HasCodeHash returns a boolean if a field has been set.
func (o *IDTokenClaims) HasCodeHash() bool {
	if o != nil && o.CodeHash != nil {
		return true
	}

	return false
}

// SetCodeHash gets a reference to the given string and assigns it to the CodeHash field.
func (o *IDTokenClaims) SetCodeHash(v string) {
	o.CodeHash = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *IDTokenClaims) GetExpiresAt() time.Time {
	if o == nil || o.ExpiresAt == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IDTokenClaims) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || o.ExpiresAt == nil {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *IDTokenClaims) HasExpiresAt() bool {
	if o != nil && o.ExpiresAt != nil {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *IDTokenClaims) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

// GetExtra returns the Extra field value if set, zero value otherwise.
func (o *IDTokenClaims) GetExtra() map[string]map[string]interface{} {
	if o == nil || o.Extra == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Extra
}

// GetExtraOk returns a tuple with the Extra field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IDTokenClaims) GetExtraOk() (map[string]map[string]interface{}, bool) {
	if o == nil || o.Extra == nil {
		return nil, false
	}
	return o.Extra, true
}

// HasExtra returns a boolean if a field has been set.
func (o *IDTokenClaims) HasExtra() bool {
	if o != nil && o.Extra != nil {
		return true
	}

	return false
}

// SetExtra gets a reference to the given map[string]map[string]interface{} and assigns it to the Extra field.
func (o *IDTokenClaims) SetExtra(v map[string]map[string]interface{}) {
	o.Extra = v
}

// GetIssuedAt returns the IssuedAt field value if set, zero value otherwise.
func (o *IDTokenClaims) GetIssuedAt() time.Time {
	if o == nil || o.IssuedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.IssuedAt
}

// GetIssuedAtOk returns a tuple with the IssuedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IDTokenClaims) GetIssuedAtOk() (*time.Time, bool) {
	if o == nil || o.IssuedAt == nil {
		return nil, false
	}
	return o.IssuedAt, true
}

// HasIssuedAt returns a boolean if a field has been set.
func (o *IDTokenClaims) HasIssuedAt() bool {
	if o != nil && o.IssuedAt != nil {
		return true
	}

	return false
}

// SetIssuedAt gets a reference to the given time.Time and assigns it to the IssuedAt field.
func (o *IDTokenClaims) SetIssuedAt(v time.Time) {
	o.IssuedAt = &v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *IDTokenClaims) GetIssuer() string {
	if o == nil || o.Issuer == nil {
		var ret string
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IDTokenClaims) GetIssuerOk() (*string, bool) {
	if o == nil || o.Issuer == nil {
		return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *IDTokenClaims) HasIssuer() bool {
	if o != nil && o.Issuer != nil {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given string and assigns it to the Issuer field.
func (o *IDTokenClaims) SetIssuer(v string) {
	o.Issuer = &v
}

// GetJTI returns the JTI field value if set, zero value otherwise.
func (o *IDTokenClaims) GetJTI() string {
	if o == nil || o.JTI == nil {
		var ret string
		return ret
	}
	return *o.JTI
}

// GetJTIOk returns a tuple with the JTI field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IDTokenClaims) GetJTIOk() (*string, bool) {
	if o == nil || o.JTI == nil {
		return nil, false
	}
	return o.JTI, true
}

// HasJTI returns a boolean if a field has been set.
func (o *IDTokenClaims) HasJTI() bool {
	if o != nil && o.JTI != nil {
		return true
	}

	return false
}

// SetJTI gets a reference to the given string and assigns it to the JTI field.
func (o *IDTokenClaims) SetJTI(v string) {
	o.JTI = &v
}

// GetNonce returns the Nonce field value if set, zero value otherwise.
func (o *IDTokenClaims) GetNonce() string {
	if o == nil || o.Nonce == nil {
		var ret string
		return ret
	}
	return *o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IDTokenClaims) GetNonceOk() (*string, bool) {
	if o == nil || o.Nonce == nil {
		return nil, false
	}
	return o.Nonce, true
}

// HasNonce returns a boolean if a field has been set.
func (o *IDTokenClaims) HasNonce() bool {
	if o != nil && o.Nonce != nil {
		return true
	}

	return false
}

// SetNonce gets a reference to the given string and assigns it to the Nonce field.
func (o *IDTokenClaims) SetNonce(v string) {
	o.Nonce = &v
}

// GetRequestedAt returns the RequestedAt field value if set, zero value otherwise.
func (o *IDTokenClaims) GetRequestedAt() time.Time {
	if o == nil || o.RequestedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.RequestedAt
}

// GetRequestedAtOk returns a tuple with the RequestedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IDTokenClaims) GetRequestedAtOk() (*time.Time, bool) {
	if o == nil || o.RequestedAt == nil {
		return nil, false
	}
	return o.RequestedAt, true
}

// HasRequestedAt returns a boolean if a field has been set.
func (o *IDTokenClaims) HasRequestedAt() bool {
	if o != nil && o.RequestedAt != nil {
		return true
	}

	return false
}

// SetRequestedAt gets a reference to the given time.Time and assigns it to the RequestedAt field.
func (o *IDTokenClaims) SetRequestedAt(v time.Time) {
	o.RequestedAt = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *IDTokenClaims) GetSubject() string {
	if o == nil || o.Subject == nil {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IDTokenClaims) GetSubjectOk() (*string, bool) {
	if o == nil || o.Subject == nil {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *IDTokenClaims) HasSubject() bool {
	if o != nil && o.Subject != nil {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *IDTokenClaims) SetSubject(v string) {
	o.Subject = &v
}

func (o IDTokenClaims) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessTokenHash != nil {
		toSerialize["AccessTokenHash"] = o.AccessTokenHash
	}
	if o.Audience != nil {
		toSerialize["Audience"] = o.Audience
	}
	if o.AuthTime != nil {
		toSerialize["AuthTime"] = o.AuthTime
	}
	if o.AuthenticationContextClassReference != nil {
		toSerialize["AuthenticationContextClassReference"] = o.AuthenticationContextClassReference
	}
	if o.AuthenticationMethodsReferences != nil {
		toSerialize["AuthenticationMethodsReferences"] = o.AuthenticationMethodsReferences
	}
	if o.CodeHash != nil {
		toSerialize["CodeHash"] = o.CodeHash
	}
	if o.ExpiresAt != nil {
		toSerialize["ExpiresAt"] = o.ExpiresAt
	}
	if o.Extra != nil {
		toSerialize["Extra"] = o.Extra
	}
	if o.IssuedAt != nil {
		toSerialize["IssuedAt"] = o.IssuedAt
	}
	if o.Issuer != nil {
		toSerialize["Issuer"] = o.Issuer
	}
	if o.JTI != nil {
		toSerialize["JTI"] = o.JTI
	}
	if o.Nonce != nil {
		toSerialize["Nonce"] = o.Nonce
	}
	if o.RequestedAt != nil {
		toSerialize["RequestedAt"] = o.RequestedAt
	}
	if o.Subject != nil {
		toSerialize["Subject"] = o.Subject
	}
	return json.Marshal(toSerialize)
}

type NullableIDTokenClaims struct {
	value *IDTokenClaims
	isSet bool
}

func (v NullableIDTokenClaims) Get() *IDTokenClaims {
	return v.value
}

func (v *NullableIDTokenClaims) Set(val *IDTokenClaims) {
	v.value = val
	v.isSet = true
}

func (v NullableIDTokenClaims) IsSet() bool {
	return v.isSet
}

func (v *NullableIDTokenClaims) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIDTokenClaims(val *IDTokenClaims) *NullableIDTokenClaims {
	return &NullableIDTokenClaims{value: val, isSet: true}
}

func (v NullableIDTokenClaims) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIDTokenClaims) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
