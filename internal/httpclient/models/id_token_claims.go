// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IDTokenClaims IDTokenClaims represent the claims used in open id connect requests
//
// swagger:model IDTokenClaims
type IDTokenClaims struct {

	// access token hash
	AccessTokenHash string `json:"AccessTokenHash,omitempty"`

	// audience
	Audience []string `json:"Audience"`

	// auth time
	// Format: date-time
	AuthTime strfmt.DateTime `json:"AuthTime,omitempty"`

	// authentication context class reference
	AuthenticationContextClassReference string `json:"AuthenticationContextClassReference,omitempty"`

	// authentication methods references
	AuthenticationMethodsReferences []string `json:"AuthenticationMethodsReferences"`

	// code hash
	CodeHash string `json:"CodeHash,omitempty"`

	// expires at
	// Format: date-time
	ExpiresAt strfmt.DateTime `json:"ExpiresAt,omitempty"`

	// extra
	Extra interface{} `json:"Extra,omitempty"`

	// issued at
	// Format: date-time
	IssuedAt strfmt.DateTime `json:"IssuedAt,omitempty"`

	// issuer
	Issuer string `json:"Issuer,omitempty"`

	// j t i
	JTI string `json:"JTI,omitempty"`

	// nonce
	Nonce string `json:"Nonce,omitempty"`

	// requested at
	// Format: date-time
	RequestedAt strfmt.DateTime `json:"RequestedAt,omitempty"`

	// subject
	Subject string `json:"Subject,omitempty"`
}

// Validate validates this ID token claims
func (m *IDTokenClaims) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IDTokenClaims) validateAuthTime(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthTime) { // not required
		return nil
	}

	if err := validate.FormatOf("AuthTime", "body", "date-time", m.AuthTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IDTokenClaims) validateExpiresAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpiresAt) { // not required
		return nil
	}

	if err := validate.FormatOf("ExpiresAt", "body", "date-time", m.ExpiresAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IDTokenClaims) validateIssuedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.IssuedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("IssuedAt", "body", "date-time", m.IssuedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IDTokenClaims) validateRequestedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("RequestedAt", "body", "date-time", m.RequestedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this ID token claims based on context it is used
func (m *IDTokenClaims) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IDTokenClaims) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IDTokenClaims) UnmarshalBinary(b []byte) error {
	var res IDTokenClaims
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
