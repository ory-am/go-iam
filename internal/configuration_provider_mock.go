// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ory/hydra/driver/configuration (interfaces: Provider)

// Package internal is a generated GoMock package.
package internal

import (
	url "net/url"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	cors "github.com/rs/cors"

	tracing "github.com/ory/x/tracing"
)

// MockConfiguration is a mock of Provider interface
type MockConfiguration struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurationMockRecorder
}

// MockConfigurationMockRecorder is the mock recorder for MockConfiguration
type MockConfigurationMockRecorder struct {
	mock *MockConfiguration
}

// NewMockConfiguration creates a new mock instance
func NewMockConfiguration(ctrl *gomock.Controller) *MockConfiguration {
	mock := &MockConfiguration{ctrl: ctrl}
	mock.recorder = &MockConfigurationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfiguration) EXPECT() *MockConfigurationMockRecorder {
	return m.recorder
}

// AccessTokenLifespan mocks base method
func (m *MockConfiguration) AccessTokenLifespan() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessTokenLifespan")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// AccessTokenLifespan indicates an expected call of AccessTokenLifespan
func (mr *MockConfigurationMockRecorder) AccessTokenLifespan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessTokenLifespan", reflect.TypeOf((*MockConfiguration)(nil).AccessTokenLifespan))
}

// AccessTokenStrategy mocks base method
func (m *MockConfiguration) AccessTokenStrategy() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessTokenStrategy")
	ret0, _ := ret[0].(string)
	return ret0
}

// AccessTokenStrategy indicates an expected call of AccessTokenStrategy
func (mr *MockConfigurationMockRecorder) AccessTokenStrategy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessTokenStrategy", reflect.TypeOf((*MockConfiguration)(nil).AccessTokenStrategy))
}

// AdminListenOn mocks base method
func (m *MockConfiguration) AdminListenOn() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminListenOn")
	ret0, _ := ret[0].(string)
	return ret0
}

// AdminListenOn indicates an expected call of AdminListenOn
func (mr *MockConfigurationMockRecorder) AdminListenOn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminListenOn", reflect.TypeOf((*MockConfiguration)(nil).AdminListenOn))
}

// AllowTLSTerminationFrom mocks base method
func (m *MockConfiguration) AllowTLSTerminationFrom() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowTLSTerminationFrom")
	ret0, _ := ret[0].([]string)
	return ret0
}

// AllowTLSTerminationFrom indicates an expected call of AllowTLSTerminationFrom
func (mr *MockConfigurationMockRecorder) AllowTLSTerminationFrom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowTLSTerminationFrom", reflect.TypeOf((*MockConfiguration)(nil).AllowTLSTerminationFrom))
}

// AuthCodeLifespan mocks base method
func (m *MockConfiguration) AuthCodeLifespan() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthCodeLifespan")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// AuthCodeLifespan indicates an expected call of AuthCodeLifespan
func (mr *MockConfigurationMockRecorder) AuthCodeLifespan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthCodeLifespan", reflect.TypeOf((*MockConfiguration)(nil).AuthCodeLifespan))
}

// BCryptCost mocks base method
func (m *MockConfiguration) BCryptCost() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BCryptCost")
	ret0, _ := ret[0].(int)
	return ret0
}

// BCryptCost indicates an expected call of BCryptCost
func (mr *MockConfigurationMockRecorder) BCryptCost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BCryptCost", reflect.TypeOf((*MockConfiguration)(nil).BCryptCost))
}

// CORSEnabled mocks base method
func (m *MockConfiguration) CORSEnabled(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CORSEnabled", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CORSEnabled indicates an expected call of CORSEnabled
func (mr *MockConfigurationMockRecorder) CORSEnabled(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CORSEnabled", reflect.TypeOf((*MockConfiguration)(nil).CORSEnabled), arg0)
}

// CORSOptions mocks base method
func (m *MockConfiguration) CORSOptions(arg0 string) cors.Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CORSOptions", arg0)
	ret0, _ := ret[0].(cors.Options)
	return ret0
}

// CORSOptions indicates an expected call of CORSOptions
func (mr *MockConfigurationMockRecorder) CORSOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CORSOptions", reflect.TypeOf((*MockConfiguration)(nil).CORSOptions), arg0)
}

// ConsentRequestMaxAge mocks base method
func (m *MockConfiguration) ConsentRequestMaxAge() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsentRequestMaxAge")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// ConsentRequestMaxAge indicates an expected call of ConsentRequestMaxAge
func (mr *MockConfigurationMockRecorder) ConsentRequestMaxAge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsentRequestMaxAge", reflect.TypeOf((*MockConfiguration)(nil).ConsentRequestMaxAge))
}

// ConsentURL mocks base method
func (m *MockConfiguration) ConsentURL() *url.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsentURL")
	ret0, _ := ret[0].(*url.URL)
	return ret0
}

// ConsentURL indicates an expected call of ConsentURL
func (mr *MockConfigurationMockRecorder) ConsentURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsentURL", reflect.TypeOf((*MockConfiguration)(nil).ConsentURL))
}

// DSN mocks base method
func (m *MockConfiguration) DSN() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DSN")
	ret0, _ := ret[0].(string)
	return ret0
}

// DSN indicates an expected call of DSN
func (mr *MockConfigurationMockRecorder) DSN() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DSN", reflect.TypeOf((*MockConfiguration)(nil).DSN))
}

// DataSourcePlugin mocks base method
func (m *MockConfiguration) DataSourcePlugin() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataSourcePlugin")
	ret0, _ := ret[0].(string)
	return ret0
}

// DataSourcePlugin indicates an expected call of DataSourcePlugin
func (mr *MockConfigurationMockRecorder) DataSourcePlugin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataSourcePlugin", reflect.TypeOf((*MockConfiguration)(nil).DataSourcePlugin))
}

// DefaultClientScope mocks base method
func (m *MockConfiguration) DefaultClientScope() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultClientScope")
	ret0, _ := ret[0].([]string)
	return ret0
}

// DefaultClientScope indicates an expected call of DefaultClientScope
func (mr *MockConfigurationMockRecorder) DefaultClientScope() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultClientScope", reflect.TypeOf((*MockConfiguration)(nil).DefaultClientScope))
}

// ErrorURL mocks base method
func (m *MockConfiguration) ErrorURL() *url.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrorURL")
	ret0, _ := ret[0].(*url.URL)
	return ret0
}

// ErrorURL indicates an expected call of ErrorURL
func (mr *MockConfigurationMockRecorder) ErrorURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorURL", reflect.TypeOf((*MockConfiguration)(nil).ErrorURL))
}

// GetCookieSecrets mocks base method
func (m *MockConfiguration) GetCookieSecrets() [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCookieSecrets")
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// GetCookieSecrets indicates an expected call of GetCookieSecrets
func (mr *MockConfigurationMockRecorder) GetCookieSecrets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCookieSecrets", reflect.TypeOf((*MockConfiguration)(nil).GetCookieSecrets))
}

// GetRotatedSystemSecrets mocks base method
func (m *MockConfiguration) GetRotatedSystemSecrets() [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRotatedSystemSecrets")
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// GetRotatedSystemSecrets indicates an expected call of GetRotatedSystemSecrets
func (mr *MockConfigurationMockRecorder) GetRotatedSystemSecrets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRotatedSystemSecrets", reflect.TypeOf((*MockConfiguration)(nil).GetRotatedSystemSecrets))
}

// GetSystemSecret mocks base method
func (m *MockConfiguration) GetSystemSecret() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemSecret")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetSystemSecret indicates an expected call of GetSystemSecret
func (mr *MockConfigurationMockRecorder) GetSystemSecret() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemSecret", reflect.TypeOf((*MockConfiguration)(nil).GetSystemSecret))
}

// IDTokenLifespan mocks base method
func (m *MockConfiguration) IDTokenLifespan() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IDTokenLifespan")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// IDTokenLifespan indicates an expected call of IDTokenLifespan
func (mr *MockConfigurationMockRecorder) IDTokenLifespan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IDTokenLifespan", reflect.TypeOf((*MockConfiguration)(nil).IDTokenLifespan))
}

// InsecureRedirects mocks base method
func (m *MockConfiguration) InsecureRedirects() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsecureRedirects")
	ret0, _ := ret[0].([]string)
	return ret0
}

// InsecureRedirects indicates an expected call of InsecureRedirects
func (mr *MockConfigurationMockRecorder) InsecureRedirects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsecureRedirects", reflect.TypeOf((*MockConfiguration)(nil).InsecureRedirects))
}

// IsUsingJWTAsAccessTokens mocks base method
func (m *MockConfiguration) IsUsingJWTAsAccessTokens() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUsingJWTAsAccessTokens")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUsingJWTAsAccessTokens indicates an expected call of IsUsingJWTAsAccessTokens
func (mr *MockConfigurationMockRecorder) IsUsingJWTAsAccessTokens() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUsingJWTAsAccessTokens", reflect.TypeOf((*MockConfiguration)(nil).IsUsingJWTAsAccessTokens))
}

// IssuerURL mocks base method
func (m *MockConfiguration) IssuerURL() *url.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssuerURL")
	ret0, _ := ret[0].(*url.URL)
	return ret0
}

// IssuerURL indicates an expected call of IssuerURL
func (mr *MockConfigurationMockRecorder) IssuerURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssuerURL", reflect.TypeOf((*MockConfiguration)(nil).IssuerURL))
}

// LoginURL mocks base method
func (m *MockConfiguration) LoginURL() *url.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginURL")
	ret0, _ := ret[0].(*url.URL)
	return ret0
}

// LoginURL indicates an expected call of LoginURL
func (mr *MockConfigurationMockRecorder) LoginURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginURL", reflect.TypeOf((*MockConfiguration)(nil).LoginURL))
}

// LogoutRedirectURL mocks base method
func (m *MockConfiguration) LogoutRedirectURL() *url.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutRedirectURL")
	ret0, _ := ret[0].(*url.URL)
	return ret0
}

// LogoutRedirectURL indicates an expected call of LogoutRedirectURL
func (mr *MockConfigurationMockRecorder) LogoutRedirectURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutRedirectURL", reflect.TypeOf((*MockConfiguration)(nil).LogoutRedirectURL))
}

// LogoutURL mocks base method
func (m *MockConfiguration) LogoutURL() *url.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutURL")
	ret0, _ := ret[0].(*url.URL)
	return ret0
}

// LogoutURL indicates an expected call of LogoutURL
func (mr *MockConfigurationMockRecorder) LogoutURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutURL", reflect.TypeOf((*MockConfiguration)(nil).LogoutURL))
}

// OAuth2AuthURL mocks base method
func (m *MockConfiguration) OAuth2AuthURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OAuth2AuthURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// OAuth2AuthURL indicates an expected call of OAuth2AuthURL
func (mr *MockConfigurationMockRecorder) OAuth2AuthURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OAuth2AuthURL", reflect.TypeOf((*MockConfiguration)(nil).OAuth2AuthURL))
}

// OAuth2ClientRegistrationURL mocks base method
func (m *MockConfiguration) OAuth2ClientRegistrationURL() *url.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OAuth2ClientRegistrationURL")
	ret0, _ := ret[0].(*url.URL)
	return ret0
}

// OAuth2ClientRegistrationURL indicates an expected call of OAuth2ClientRegistrationURL
func (mr *MockConfigurationMockRecorder) OAuth2ClientRegistrationURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OAuth2ClientRegistrationURL", reflect.TypeOf((*MockConfiguration)(nil).OAuth2ClientRegistrationURL))
}

// OIDCDiscoverySupportedClaims mocks base method
func (m *MockConfiguration) OIDCDiscoverySupportedClaims() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OIDCDiscoverySupportedClaims")
	ret0, _ := ret[0].([]string)
	return ret0
}

// OIDCDiscoverySupportedClaims indicates an expected call of OIDCDiscoverySupportedClaims
func (mr *MockConfigurationMockRecorder) OIDCDiscoverySupportedClaims() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OIDCDiscoverySupportedClaims", reflect.TypeOf((*MockConfiguration)(nil).OIDCDiscoverySupportedClaims))
}

// OIDCDiscoverySupportedScope mocks base method
func (m *MockConfiguration) OIDCDiscoverySupportedScope() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OIDCDiscoverySupportedScope")
	ret0, _ := ret[0].([]string)
	return ret0
}

// OIDCDiscoverySupportedScope indicates an expected call of OIDCDiscoverySupportedScope
func (mr *MockConfigurationMockRecorder) OIDCDiscoverySupportedScope() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OIDCDiscoverySupportedScope", reflect.TypeOf((*MockConfiguration)(nil).OIDCDiscoverySupportedScope))
}

// OIDCDiscoveryUserinfoEndpoint mocks base method
func (m *MockConfiguration) OIDCDiscoveryUserinfoEndpoint() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OIDCDiscoveryUserinfoEndpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

// OIDCDiscoveryUserinfoEndpoint indicates an expected call of OIDCDiscoveryUserinfoEndpoint
func (mr *MockConfigurationMockRecorder) OIDCDiscoveryUserinfoEndpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OIDCDiscoveryUserinfoEndpoint", reflect.TypeOf((*MockConfiguration)(nil).OIDCDiscoveryUserinfoEndpoint))
}

// PublicListenOn mocks base method
func (m *MockConfiguration) PublicListenOn() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicListenOn")
	ret0, _ := ret[0].(string)
	return ret0
}

// PublicListenOn indicates an expected call of PublicListenOn
func (mr *MockConfigurationMockRecorder) PublicListenOn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicListenOn", reflect.TypeOf((*MockConfiguration)(nil).PublicListenOn))
}

// PublicURL mocks base method
func (m *MockConfiguration) PublicURL() *url.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicURL")
	ret0, _ := ret[0].(*url.URL)
	return ret0
}

// PublicURL indicates an expected call of PublicURL
func (mr *MockConfigurationMockRecorder) PublicURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicURL", reflect.TypeOf((*MockConfiguration)(nil).PublicURL))
}

// RefreshTokenLifespan mocks base method
func (m *MockConfiguration) RefreshTokenLifespan() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokenLifespan")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// RefreshTokenLifespan indicates an expected call of RefreshTokenLifespan
func (mr *MockConfigurationMockRecorder) RefreshTokenLifespan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokenLifespan", reflect.TypeOf((*MockConfiguration)(nil).RefreshTokenLifespan))
}

// ScopeStrategy mocks base method
func (m *MockConfiguration) ScopeStrategy() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScopeStrategy")
	ret0, _ := ret[0].(string)
	return ret0
}

// ScopeStrategy indicates an expected call of ScopeStrategy
func (mr *MockConfigurationMockRecorder) ScopeStrategy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScopeStrategy", reflect.TypeOf((*MockConfiguration)(nil).ScopeStrategy))
}

// ServesHTTPS mocks base method
func (m *MockConfiguration) ServesHTTPS() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServesHTTPS")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ServesHTTPS indicates an expected call of ServesHTTPS
func (mr *MockConfigurationMockRecorder) ServesHTTPS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServesHTTPS", reflect.TypeOf((*MockConfiguration)(nil).ServesHTTPS))
}

// ShareOAuth2Debug mocks base method
func (m *MockConfiguration) ShareOAuth2Debug() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShareOAuth2Debug")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShareOAuth2Debug indicates an expected call of ShareOAuth2Debug
func (mr *MockConfigurationMockRecorder) ShareOAuth2Debug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareOAuth2Debug", reflect.TypeOf((*MockConfiguration)(nil).ShareOAuth2Debug))
}

// SubjectIdentifierAlgorithmSalt mocks base method
func (m *MockConfiguration) SubjectIdentifierAlgorithmSalt() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubjectIdentifierAlgorithmSalt")
	ret0, _ := ret[0].(string)
	return ret0
}

// SubjectIdentifierAlgorithmSalt indicates an expected call of SubjectIdentifierAlgorithmSalt
func (mr *MockConfigurationMockRecorder) SubjectIdentifierAlgorithmSalt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubjectIdentifierAlgorithmSalt", reflect.TypeOf((*MockConfiguration)(nil).SubjectIdentifierAlgorithmSalt))
}

// SubjectTypesSupported mocks base method
func (m *MockConfiguration) SubjectTypesSupported() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubjectTypesSupported")
	ret0, _ := ret[0].([]string)
	return ret0
}

// SubjectTypesSupported indicates an expected call of SubjectTypesSupported
func (mr *MockConfigurationMockRecorder) SubjectTypesSupported() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubjectTypesSupported", reflect.TypeOf((*MockConfiguration)(nil).SubjectTypesSupported))
}

// TracingJaegerConfig mocks base method
func (m *MockConfiguration) TracingJaegerConfig() *tracing.JaegerConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TracingJaegerConfig")
	ret0, _ := ret[0].(*tracing.JaegerConfig)
	return ret0
}

// TracingJaegerConfig indicates an expected call of TracingJaegerConfig
func (mr *MockConfigurationMockRecorder) TracingJaegerConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TracingJaegerConfig", reflect.TypeOf((*MockConfiguration)(nil).TracingJaegerConfig))
}

// TracingProvider mocks base method
func (m *MockConfiguration) TracingProvider() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TracingProvider")
	ret0, _ := ret[0].(string)
	return ret0
}

// TracingProvider indicates an expected call of TracingProvider
func (mr *MockConfigurationMockRecorder) TracingProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TracingProvider", reflect.TypeOf((*MockConfiguration)(nil).TracingProvider))
}

// TracingServiceName mocks base method
func (m *MockConfiguration) TracingServiceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TracingServiceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// TracingServiceName indicates an expected call of TracingServiceName
func (mr *MockConfigurationMockRecorder) TracingServiceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TracingServiceName", reflect.TypeOf((*MockConfiguration)(nil).TracingServiceName))
}

// WellKnownKeys mocks base method
func (m *MockConfiguration) WellKnownKeys(arg0 ...string) []string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WellKnownKeys", varargs...)
	ret0, _ := ret[0].([]string)
	return ret0
}

// WellKnownKeys indicates an expected call of WellKnownKeys
func (mr *MockConfigurationMockRecorder) WellKnownKeys(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WellKnownKeys", reflect.TypeOf((*MockConfiguration)(nil).WellKnownKeys), arg0...)
}
