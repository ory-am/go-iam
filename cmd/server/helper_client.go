/*
 * Copyright Â© 2015-2018 Aeneas Rekkas <aeneas+oss@aeneas.io>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @author		Aeneas Rekkas <aeneas+oss@aeneas.io>
 * @copyright 	2015-2018 Aeneas Rekkas <aeneas+oss@aeneas.io>
 * @license 	Apache-2.0
 */

package server

import (
	"os"

	"github.com/ory/hydra/client"
	"github.com/ory/hydra/config"
	"github.com/ory/hydra/pkg"
)

func (h *Handler) createRootIfNewInstall(c *config.Config) {
	clients, err := h.Clients.Manager.GetClients(100, 0)
	pkg.Must(err, "Could not fetch client list: %s", err)
	if len(clients) != 0 {
		return
	}

	rs, err := pkg.GenerateSecret(16)
	pkg.Must(err, "Could notgenerate secret because %s", err)
	var providedSecrets bool
	secret := string(rs)

	id := ""
	forceRootClientID := os.Getenv("FORCE_ROOT_CLIENT_ID")
	forceRootClientSecret := os.Getenv("FORCE_ROOT_CLIENT_SECRET")
	if forceRootClientID != "" && forceRootClientSecret != "" {
		id = forceRootClientID
		secret = forceRootClientSecret
		providedSecrets = true
	}

	c.GetLogger().Warn("No clients were found. Creating a temporary root client...")
	root := &client.Client{
		ID:            id,
		Name:          "This temporary client is generated by hydra and is granted all of hydra's administrative privileges. It must be removed when everything is set up.",
		ResponseTypes: []string{"id_token", "code", "token"},
		GrantTypes:    []string{"implicit", "refresh_token", "authorization_code", "password", "client_credentials"},
		Scope:         "hydra.* openid offline hydra",
		RedirectURIs:  []string{"http://localhost:4445/callback"},
		Secret:        secret,
	}

	err = h.Clients.Manager.CreateClient(root)
	pkg.Must(err, "Could not create temporary root because %s", err)

	c.ClientID = root.ID
	c.ClientSecret = string(secret)

	c.GetLogger().Infoln("Temporary root client created.")
	if !providedSecrets {
		c.GetLogger().Infof("client_id: %s", root.GetID())
		c.GetLogger().Infof("client_secret: %s", string(secret))
		c.GetLogger().Warn("WARNING: YOU MUST delete this client once in production, as credentials may have been leaked in your logfiles.")
	}
}

func prefixResource(prefix, resource string) string {
	if prefix == "" {
		prefix = "rn:hydra"
	}

	if prefix[len(prefix)-1] == ':' {
		prefix = prefix[:len(prefix)-1]
	}

	return prefix + ":" + resource
}
