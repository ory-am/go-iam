/*
 * Ory Hydra API
 *
 * Documentation for all of Ory Hydra's APIs.
 *
 * API version: 1.0.0
 * Contact: hi@ory.sh
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// NullDuration TODO delete this type and replace it with ory/x/sqlxx/NullDuration when applying the custom client token TTL patch to Hydra 2.x
type NullDuration struct {
	// A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
	Duration *int64 `json:"Duration,omitempty"`
	Valid    *bool  `json:"Valid,omitempty"`
}

// NewNullDuration instantiates a new NullDuration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNullDuration() *NullDuration {
	this := NullDuration{}
	return &this
}

// NewNullDurationWithDefaults instantiates a new NullDuration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNullDurationWithDefaults() *NullDuration {
	this := NullDuration{}
	return &this
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *NullDuration) GetDuration() int64 {
	if o == nil || o.Duration == nil {
		var ret int64
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullDuration) GetDurationOk() (*int64, bool) {
	if o == nil || o.Duration == nil {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *NullDuration) HasDuration() bool {
	if o != nil && o.Duration != nil {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int64 and assigns it to the Duration field.
func (o *NullDuration) SetDuration(v int64) {
	o.Duration = &v
}

// GetValid returns the Valid field value if set, zero value otherwise.
func (o *NullDuration) GetValid() bool {
	if o == nil || o.Valid == nil {
		var ret bool
		return ret
	}
	return *o.Valid
}

// GetValidOk returns a tuple with the Valid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullDuration) GetValidOk() (*bool, bool) {
	if o == nil || o.Valid == nil {
		return nil, false
	}
	return o.Valid, true
}

// HasValid returns a boolean if a field has been set.
func (o *NullDuration) HasValid() bool {
	if o != nil && o.Valid != nil {
		return true
	}

	return false
}

// SetValid gets a reference to the given bool and assigns it to the Valid field.
func (o *NullDuration) SetValid(v bool) {
	o.Valid = &v
}

func (o NullDuration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Duration != nil {
		toSerialize["Duration"] = o.Duration
	}
	if o.Valid != nil {
		toSerialize["Valid"] = o.Valid
	}
	return json.Marshal(toSerialize)
}

type NullableNullDuration struct {
	value *NullDuration
	isSet bool
}

func (v NullableNullDuration) Get() *NullDuration {
	return v.value
}

func (v *NullableNullDuration) Set(val *NullDuration) {
	v.value = val
	v.isSet = true
}

func (v NullableNullDuration) IsSet() bool {
	return v.isSet
}

func (v *NullableNullDuration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNullDuration(val *NullDuration) *NullableNullDuration {
	return &NullableNullDuration{value: val, isSet: true}
}

func (v NullableNullDuration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNullDuration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
