// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Session session
//
// swagger:model Session
type Session struct {

	// allowed top level claims
	AllowedTopLevelClaims []string `json:"allowed_top_level_claims"`

	// client id
	ClientID string `json:"client_id,omitempty"`

	// consent challenge
	ConsentChallenge string `json:"consent_challenge,omitempty"`

	// exclude not before claim
	ExcludeNotBeforeClaim bool `json:"exclude_not_before_claim,omitempty"`

	// expires at
	ExpiresAt map[string]strfmt.DateTime `json:"expires_at,omitempty"`

	// extra
	Extra interface{} `json:"extra,omitempty"`

	// headers
	Headers *Headers `json:"headers,omitempty"`

	// id token claims
	IDTokenClaims *IDTokenClaims `json:"id_token_claims,omitempty"`

	// kid
	Kid string `json:"kid,omitempty"`

	// subject
	Subject string `json:"subject,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this session
func (m *Session) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeaders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIDTokenClaims(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Session) validateExpiresAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpiresAt) { // not required
		return nil
	}

	for k := range m.ExpiresAt {

		if err := validate.FormatOf("expires_at"+"."+k, "body", "date-time", m.ExpiresAt[k].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *Session) validateHeaders(formats strfmt.Registry) error {
	if swag.IsZero(m.Headers) { // not required
		return nil
	}

	if m.Headers != nil {
		if err := m.Headers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("headers")
			}
			return err
		}
	}

	return nil
}

func (m *Session) validateIDTokenClaims(formats strfmt.Registry) error {
	if swag.IsZero(m.IDTokenClaims) { // not required
		return nil
	}

	if m.IDTokenClaims != nil {
		if err := m.IDTokenClaims.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("id_token_claims")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this session based on the context it is used
func (m *Session) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHeaders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIDTokenClaims(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Session) contextValidateHeaders(ctx context.Context, formats strfmt.Registry) error {

	if m.Headers != nil {
		if err := m.Headers.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("headers")
			}
			return err
		}
	}

	return nil
}

func (m *Session) contextValidateIDTokenClaims(ctx context.Context, formats strfmt.Registry) error {

	if m.IDTokenClaims != nil {
		if err := m.IDTokenClaims.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("id_token_claims")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Session) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Session) UnmarshalBinary(b []byte) error {
	var res Session
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
