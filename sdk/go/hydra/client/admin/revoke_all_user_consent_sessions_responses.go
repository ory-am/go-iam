// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/ory/hydra/sdk/go/hydra/models"
)

// RevokeAllUserConsentSessionsReader is a Reader for the RevokeAllUserConsentSessions structure.
type RevokeAllUserConsentSessionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RevokeAllUserConsentSessionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewRevokeAllUserConsentSessionsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewRevokeAllUserConsentSessionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewRevokeAllUserConsentSessionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRevokeAllUserConsentSessionsNoContent creates a RevokeAllUserConsentSessionsNoContent with default headers values
func NewRevokeAllUserConsentSessionsNoContent() *RevokeAllUserConsentSessionsNoContent {
	return &RevokeAllUserConsentSessionsNoContent{}
}

/*RevokeAllUserConsentSessionsNoContent handles this case with default header values.

Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is
typically 201.
*/
type RevokeAllUserConsentSessionsNoContent struct {
}

func (o *RevokeAllUserConsentSessionsNoContent) Error() string {
	return fmt.Sprintf("[DELETE /oauth2/auth/sessions/consent/{user}][%d] revokeAllUserConsentSessionsNoContent ", 204)
}

func (o *RevokeAllUserConsentSessionsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRevokeAllUserConsentSessionsNotFound creates a RevokeAllUserConsentSessionsNotFound with default headers values
func NewRevokeAllUserConsentSessionsNotFound() *RevokeAllUserConsentSessionsNotFound {
	return &RevokeAllUserConsentSessionsNotFound{}
}

/*RevokeAllUserConsentSessionsNotFound handles this case with default header values.

genericError
*/
type RevokeAllUserConsentSessionsNotFound struct {
	Payload *models.GenericError
}

func (o *RevokeAllUserConsentSessionsNotFound) Error() string {
	return fmt.Sprintf("[DELETE /oauth2/auth/sessions/consent/{user}][%d] revokeAllUserConsentSessionsNotFound  %+v", 404, o.Payload)
}

func (o *RevokeAllUserConsentSessionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRevokeAllUserConsentSessionsInternalServerError creates a RevokeAllUserConsentSessionsInternalServerError with default headers values
func NewRevokeAllUserConsentSessionsInternalServerError() *RevokeAllUserConsentSessionsInternalServerError {
	return &RevokeAllUserConsentSessionsInternalServerError{}
}

/*RevokeAllUserConsentSessionsInternalServerError handles this case with default header values.

genericError
*/
type RevokeAllUserConsentSessionsInternalServerError struct {
	Payload *models.GenericError
}

func (o *RevokeAllUserConsentSessionsInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /oauth2/auth/sessions/consent/{user}][%d] revokeAllUserConsentSessionsInternalServerError  %+v", 500, o.Payload)
}

func (o *RevokeAllUserConsentSessionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
