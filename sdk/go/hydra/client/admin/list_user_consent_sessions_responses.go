// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/ory/hydra/sdk/go/hydra/models"
)

// ListUserConsentSessionsReader is a Reader for the ListUserConsentSessions structure.
type ListUserConsentSessionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListUserConsentSessionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListUserConsentSessionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewListUserConsentSessionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewListUserConsentSessionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListUserConsentSessionsOK creates a ListUserConsentSessionsOK with default headers values
func NewListUserConsentSessionsOK() *ListUserConsentSessionsOK {
	return &ListUserConsentSessionsOK{}
}

/*ListUserConsentSessionsOK handles this case with default header values.

A list of handled consent requests.
*/
type ListUserConsentSessionsOK struct {
	Payload []*models.PreviousConsentSession
}

func (o *ListUserConsentSessionsOK) Error() string {
	return fmt.Sprintf("[GET /oauth2/auth/sessions/consent/{user}][%d] listUserConsentSessionsOK  %+v", 200, o.Payload)
}

func (o *ListUserConsentSessionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUserConsentSessionsNotFound creates a ListUserConsentSessionsNotFound with default headers values
func NewListUserConsentSessionsNotFound() *ListUserConsentSessionsNotFound {
	return &ListUserConsentSessionsNotFound{}
}

/*ListUserConsentSessionsNotFound handles this case with default header values.

genericError
*/
type ListUserConsentSessionsNotFound struct {
	Payload *models.GenericError
}

func (o *ListUserConsentSessionsNotFound) Error() string {
	return fmt.Sprintf("[GET /oauth2/auth/sessions/consent/{user}][%d] listUserConsentSessionsNotFound  %+v", 404, o.Payload)
}

func (o *ListUserConsentSessionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUserConsentSessionsInternalServerError creates a ListUserConsentSessionsInternalServerError with default headers values
func NewListUserConsentSessionsInternalServerError() *ListUserConsentSessionsInternalServerError {
	return &ListUserConsentSessionsInternalServerError{}
}

/*ListUserConsentSessionsInternalServerError handles this case with default header values.

genericError
*/
type ListUserConsentSessionsInternalServerError struct {
	Payload *models.GenericError
}

func (o *ListUserConsentSessionsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /oauth2/auth/sessions/consent/{user}][%d] listUserConsentSessionsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListUserConsentSessionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
