// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// migrations/sql/shared/1.sql
// migrations/sql/shared/2.sql
// migrations/sql/shared/3.sql
// migrations/sql/mysql/.gitkeep
// migrations/sql/mysql/4.sql
// migrations/sql/postgres/.gitkeep
// migrations/sql/postgres/4.sql
// migrations/sql/tests/.gitkeep
// migrations/sql/tests/1_test.sql
// migrations/sql/tests/2_test.sql
// migrations/sql/tests/3_test.sql
// migrations/sql/tests/4_test.sql
package jwk

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrationsSqlShared1Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\x41\x4b\xc3\x30\x1c\xc5\xcf\xfd\xc3\xff\x3b\xbc\x63\x8b\x1b\x88\xb0\xd3\x4e\xd1\x66\x50\x8c\xdb\xc8\x52\x70\x27\x09\x26\xb8\x58\x6c\x25\x0d\xad\xfd\xf6\x62\x91\xa2\x87\xbd\xe3\x7b\xef\x77\xf8\xad\xd7\xb8\xf9\x08\x6f\xd1\x26\x8f\xfa\x93\xe9\x41\x4b\x61\x24\x8c\xb8\x57\x12\xd5\x0e\xfb\x83\x81\x7c\xae\x4e\xe6\x84\xcb\xe4\xa2\x7d\x79\x1f\x1b\xe4\x4c\x59\x1f\x1c\x7e\x32\xd8\xf8\x7a\xb1\x31\xbf\xdb\x6c\x8a\xf9\xbd\xaf\x95\x5a\x31\x65\x4d\x70\xc8\xae\xae\x83\x8f\x7d\xe8\x5a\x84\x36\x2d\x3d\x4a\xb9\x13\xb5\x32\xb8\x9d\x79\x3f\x39\x9b\x2c\x92\xff\x4a\xff\xd0\xa3\xae\x9e\x84\x3e\xe3\x51\x9e\x91\xf7\xc1\xad\xd0\x04\x57\x30\x15\x5b\x26\xa6\xbf\x42\x65\x37\xb6\x4c\xa5\x3e\x1c\x7f\x85\x16\x85\x2d\xd3\x77\x00\x00\x00\xff\xff\x79\x0e\xae\xfb\xfa\x00\x00\x00")

func migrationsSqlShared1SqlBytes() ([]byte, error) {
	return bindataRead(
		_migrationsSqlShared1Sql,
		"migrations/sql/shared/1.sql",
	)
}

func migrationsSqlShared1Sql() (*asset, error) {
	bytes, err := migrationsSqlShared1SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/sql/shared/1.sql", size: 250, mode: os.FileMode(438), modTime: time.Unix(1540972831, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsSqlShared2Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe5\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\xa8\x4c\x29\x4a\x8c\xcf\x2a\xcf\x56\x70\x74\x71\x51\x48\x2e\x4a\x4d\x2c\x49\x4d\x89\x4f\x2c\x51\x08\xf1\xf4\x75\x0d\x0e\x71\xf4\x0d\x50\xf0\xf3\x0f\x51\xf0\x0b\xf5\xf1\x51\x70\x71\x75\x73\x0c\xf5\x09\x51\xf0\xf3\x0f\xd7\xd0\xb4\xe6\xe5\xe2\xe5\x42\x36\xd9\x25\xbf\x3c\x0f\x97\xd9\x2e\x41\xfe\x01\x0a\xce\xfe\x3e\xa1\xbe\x7e\x48\x76\x58\xf3\x72\x01\x02\x00\x00\xff\xff\x01\xb7\xea\xb8\x9b\x00\x00\x00")

func migrationsSqlShared2SqlBytes() ([]byte, error) {
	return bindataRead(
		_migrationsSqlShared2Sql,
		"migrations/sql/shared/2.sql",
	)
}

func migrationsSqlShared2Sql() (*asset, error) {
	bytes, err := migrationsSqlShared2SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/sql/shared/2.sql", size: 155, mode: os.FileMode(438), modTime: time.Unix(1540972848, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsSqlShared3Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe5\x72\x71\xf5\x71\x0d\x71\x55\x70\x0b\xf2\xf7\x55\xc8\xa8\x4c\x29\x4a\x8c\xcf\x2a\xcf\x56\x08\xf7\x70\x0d\x72\x55\x28\xce\x4c\xb1\x55\x07\x0b\xea\xe5\x17\xa4\xe6\x65\xa6\xe8\x65\xa6\xe8\x96\xe4\x67\xa7\xe6\xa9\x5b\xf3\x72\xf1\x72\x21\x9b\xe5\x92\x5f\x9e\xc7\xcb\x05\x08\x00\x00\xff\xff\x2f\x80\xe3\x80\x5e\x00\x00\x00")

func migrationsSqlShared3SqlBytes() ([]byte, error) {
	return bindataRead(
		_migrationsSqlShared3Sql,
		"migrations/sql/shared/3.sql",
	)
}

func migrationsSqlShared3Sql() (*asset, error) {
	bytes, err := migrationsSqlShared3SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/sql/shared/3.sql", size: 94, mode: os.FileMode(438), modTime: time.Unix(1540973062, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsSqlMysqlGitkeep = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func migrationsSqlMysqlGitkeepBytes() ([]byte, error) {
	return bindataRead(
		_migrationsSqlMysqlGitkeep,
		"migrations/sql/mysql/.gitkeep",
	)
}

func migrationsSqlMysqlGitkeep() (*asset, error) {
	bytes, err := migrationsSqlMysqlGitkeepBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/sql/mysql/.gitkeep", size: 0, mode: os.FileMode(438), modTime: time.Unix(1540902707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsSqlMysql4Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcf\x4f\x4b\xc3\x30\x18\xc7\xf1\x7b\xa1\xef\xe1\x77\x54\xb4\xaf\xa0\xa7\xd8\x3c\x48\xb0\x7d\x52\x63\x02\xf6\x14\x0a\x11\x8d\x41\xd7\x75\x1b\xdd\xde\xfd\x60\x97\x75\x83\xf6\xfe\xfc\xf9\x7e\x8a\x02\x4f\x7f\xf1\x7b\xec\xf7\x5f\x70\x43\x9e\x89\xda\x92\x81\x15\x2f\x35\xe1\xe7\x14\xc6\xde\xff\x4e\x09\xd2\xe8\x16\xad\x51\x8d\x30\x1d\xde\xa8\x2b\xf3\xac\x32\x24\x2c\xc1\xb1\x7a\x77\x04\xc5\x92\x3e\xaf\x0b\x3e\x86\xa3\x8f\xc1\x1f\xb6\xd0\x3c\xbb\xf3\xb0\x8b\xe1\x19\x29\x86\xc7\x72\xe9\x95\x90\x12\x43\x82\x62\x0b\xc7\x1f\xea\x95\x49\x42\x38\xab\xbd\xe2\xca\x50\x43\x6c\xef\x42\xf2\x6c\x6e\x90\x9b\xe9\x7f\x55\x51\xe9\xda\x35\x8c\x21\x2d\x16\x5c\xc6\x16\x41\xab\xe1\xb3\xb2\x5b\xeb\x39\x00\x00\xff\xff\x92\x9e\xe6\x3b\x67\x01\x00\x00")

func migrationsSqlMysql4SqlBytes() ([]byte, error) {
	return bindataRead(
		_migrationsSqlMysql4Sql,
		"migrations/sql/mysql/4.sql",
	)
}

func migrationsSqlMysql4Sql() (*asset, error) {
	bytes, err := migrationsSqlMysql4SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/sql/mysql/4.sql", size: 359, mode: os.FileMode(438), modTime: time.Unix(1540973008, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsSqlPostgresGitkeep = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func migrationsSqlPostgresGitkeepBytes() ([]byte, error) {
	return bindataRead(
		_migrationsSqlPostgresGitkeep,
		"migrations/sql/postgres/.gitkeep",
	)
}

func migrationsSqlPostgresGitkeep() (*asset, error) {
	bytes, err := migrationsSqlPostgresGitkeepBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/sql/postgres/.gitkeep", size: 0, mode: os.FileMode(438), modTime: time.Unix(1540902707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsSqlPostgres4Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe5\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\xa8\x4c\x29\x4a\x8c\xcf\x2a\xcf\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x0b\x0e\x09\x72\xf4\xf4\x0b\x41\xc8\xc4\x17\x64\xa7\x56\x5a\xe3\xd2\xe6\xe8\xe2\xa2\x50\x90\xad\x10\xec\x1a\xe4\xe9\xe8\x83\x57\x55\x40\x90\xa7\xaf\x63\x50\xa4\x82\xb7\x6b\xa4\x82\x46\x41\xb6\xa6\x35\x2f\x97\x73\x90\xab\x63\x88\xab\x42\xa8\x9f\x67\x60\xa8\xab\x82\xa7\x9f\x8b\x6b\x04\x92\xbd\x99\x29\x15\xf1\x99\x29\xf1\xa5\x85\x0a\xfe\x7e\x48\x66\x69\x14\x67\xa6\xe8\x28\x64\x67\xa6\x80\x4c\xe0\x04\x01\x38\x85\xec\x53\x97\xfc\xf2\x3c\x2a\xfb\x15\xaa\xcd\x27\xd4\xd7\x4f\xa1\x20\xdb\x9a\x97\x0b\x2c\x80\xd3\xd9\xc4\x87\x06\xb2\x8f\x00\x01\x00\x00\xff\xff\xca\x35\xc4\x5c\xae\x01\x00\x00")

func migrationsSqlPostgres4SqlBytes() ([]byte, error) {
	return bindataRead(
		_migrationsSqlPostgres4Sql,
		"migrations/sql/postgres/4.sql",
	)
}

func migrationsSqlPostgres4Sql() (*asset, error) {
	bytes, err := migrationsSqlPostgres4SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/sql/postgres/4.sql", size: 430, mode: os.FileMode(438), modTime: time.Unix(1540973062, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsSqlTestsGitkeep = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func migrationsSqlTestsGitkeepBytes() ([]byte, error) {
	return bindataRead(
		_migrationsSqlTestsGitkeep,
		"migrations/sql/tests/.gitkeep",
	)
}

func migrationsSqlTestsGitkeep() (*asset, error) {
	bytes, err := migrationsSqlTestsGitkeepBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/sql/tests/.gitkeep", size: 0, mode: os.FileMode(438), modTime: time.Unix(1540902707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsSqlTests1_testSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe5\xf2\xf4\x0b\x76\x0d\x0a\x51\xf0\xf4\x0b\xf1\x57\xc8\xa8\x4c\x29\x4a\x8c\xcf\x2a\xcf\x56\xd0\x28\xce\x4c\xd1\x51\xc8\x06\x11\x65\xa9\x45\xc5\x99\xf9\x79\x3a\x0a\xd9\xa9\x95\x29\x89\x25\x89\x9a\x0a\x61\x8e\x3e\xa1\xae\xc1\x0a\x1a\xea\x86\xba\xc5\x99\x29\xea\x3a\x0a\xea\x86\xba\xd9\x60\x86\x81\x8e\x82\x7a\x71\x7e\x6e\xaa\x6e\x76\x6a\xa5\xba\xa6\x35\x2f\x17\x2f\x17\xb2\x7d\x2e\xf9\xe5\x79\xbc\x5c\x80\x00\x00\x00\xff\xff\xc4\x2e\x5d\x1a\x82\x00\x00\x00")

func migrationsSqlTests1_testSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrationsSqlTests1_testSql,
		"migrations/sql/tests/1_test.sql",
	)
}

func migrationsSqlTests1_testSql() (*asset, error) {
	bytes, err := migrationsSqlTests1_testSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/sql/tests/1_test.sql", size: 130, mode: os.FileMode(438), modTime: time.Unix(1540973115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsSqlTests2_testSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xce\xb1\xaa\xc2\x30\x14\x87\xf1\x3d\x90\x77\xf8\x6f\x69\xb9\x09\x5c\xba\x3a\x09\x76\x28\x48\x0b\xb6\xd5\xb1\x1c\xcc\x41\x63\x68\x2b\x49\xb0\xe4\xed\x45\x27\x97\x8f\x6f\xfc\x19\x83\xbf\xd9\xdd\x02\x25\xc6\xf8\x94\xa2\x69\xfb\xfa\x34\xa0\x69\x87\x0e\xf7\x6c\x03\x4d\x8f\xcd\xa3\x88\xce\x6a\xf8\x4f\x5e\x1c\xa2\x5b\x17\x0d\xcf\xd9\x52\x22\x8d\x6b\x60\x4a\x6c\x27\x4a\x25\xce\xfb\xe3\x58\xf7\x28\x54\x65\xa2\xb3\x4a\x43\x55\xc6\x7f\xe7\x5f\x43\xc5\x75\x66\xe3\x39\x2b\x8d\xb6\xbb\x14\x65\xb9\x93\x42\x8a\x5f\xc2\x61\xdd\x16\x29\xde\x01\x00\x00\xff\xff\x80\x15\x1a\xa0\x95\x00\x00\x00")

func migrationsSqlTests2_testSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrationsSqlTests2_testSql,
		"migrations/sql/tests/2_test.sql",
	)
}

func migrationsSqlTests2_testSql() (*asset, error) {
	bytes, err := migrationsSqlTests2_testSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/sql/tests/2_test.sql", size: 149, mode: os.FileMode(438), modTime: time.Unix(1540973138, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsSqlTests3_testSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xce\xb1\xaa\xc2\x30\x14\x87\xf1\x3d\x90\x77\xf8\x6f\x69\xb9\x09\x5c\xe8\xe8\x24\xd8\xa1\x20\x2d\xd8\x56\xc7\x72\x30\x07\x8d\xa1\xad\x24\xc1\x92\xb7\x17\x9d\x5c\x3e\xbe\xf1\x67\x0c\xfe\x66\x77\x0b\x94\x18\xe3\x53\x8a\xa6\xed\xeb\xd3\x80\xa6\x1d\x3a\xdc\xb3\x0d\x34\x3d\x36\x8f\x22\x3a\xab\xe1\x3f\x79\x71\x88\x6e\x5d\x34\x3c\x67\x4b\x89\x34\xae\x81\x29\xb1\x9d\x28\x95\x38\xef\x8f\x63\xdd\xa3\x50\x95\x89\xce\x2a\x0d\x55\x19\xff\x9d\x7f\x0d\x15\xd7\x99\x8d\xe7\xac\x34\xda\xee\x52\x94\xe5\x4e\x0a\x29\x7e\x09\x87\x75\x5b\xa4\x78\x07\x00\x00\xff\xff\xb2\xa4\x1b\xb4\x95\x00\x00\x00")

func migrationsSqlTests3_testSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrationsSqlTests3_testSql,
		"migrations/sql/tests/3_test.sql",
	)
}

func migrationsSqlTests3_testSql() (*asset, error) {
	bytes, err := migrationsSqlTests3_testSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/sql/tests/3_test.sql", size: 149, mode: os.FileMode(438), modTime: time.Unix(1540973138, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsSqlTests4_testSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xce\xb1\xaa\xc2\x30\x14\x87\xf1\x3d\x90\x77\xf8\x6f\x69\xb9\x09\xdc\xa1\x9b\x93\x60\x87\x82\xb4\x60\x5b\x1d\xcb\xc1\x1c\x34\x86\xb6\x92\x04\x4b\xde\x5e\x74\x72\xf9\xf8\xc6\x9f\x31\xf8\x9b\xdd\x2d\x50\x62\x8c\x4f\x29\x9a\xb6\xaf\x4f\x03\x9a\x76\xe8\x70\xcf\x36\xd0\xf4\xd8\x3c\x8a\xe8\xac\x86\xff\xe4\xc5\x21\xba\x75\xd1\xf0\x9c\x2d\x25\xd2\xb8\x06\xa6\xc4\x76\xa2\x54\xe2\xbc\x3f\x8e\x75\x8f\x42\x55\x26\x3a\xab\x34\x54\x65\xfc\x77\xfe\x35\x54\x5c\x67\x36\x9e\xb3\xd2\x68\xbb\x4b\x51\x96\x3b\x29\xa4\xf8\x25\x1c\xd6\x6d\x91\xe2\x1d\x00\x00\xff\xff\x2c\xb3\x1f\xd8\x95\x00\x00\x00")

func migrationsSqlTests4_testSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrationsSqlTests4_testSql,
		"migrations/sql/tests/4_test.sql",
	)
}

func migrationsSqlTests4_testSql() (*asset, error) {
	bytes, err := migrationsSqlTests4_testSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/sql/tests/4_test.sql", size: 149, mode: os.FileMode(438), modTime: time.Unix(1540973147, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/sql/shared/1.sql":      migrationsSqlShared1Sql,
	"migrations/sql/shared/2.sql":      migrationsSqlShared2Sql,
	"migrations/sql/shared/3.sql":      migrationsSqlShared3Sql,
	"migrations/sql/mysql/.gitkeep":    migrationsSqlMysqlGitkeep,
	"migrations/sql/mysql/4.sql":       migrationsSqlMysql4Sql,
	"migrations/sql/postgres/.gitkeep": migrationsSqlPostgresGitkeep,
	"migrations/sql/postgres/4.sql":    migrationsSqlPostgres4Sql,
	"migrations/sql/tests/.gitkeep":    migrationsSqlTestsGitkeep,
	"migrations/sql/tests/1_test.sql":  migrationsSqlTests1_testSql,
	"migrations/sql/tests/2_test.sql":  migrationsSqlTests2_testSql,
	"migrations/sql/tests/3_test.sql":  migrationsSqlTests3_testSql,
	"migrations/sql/tests/4_test.sql":  migrationsSqlTests4_testSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"sql": &bintree{nil, map[string]*bintree{
			"mysql": &bintree{nil, map[string]*bintree{
				".gitkeep": &bintree{migrationsSqlMysqlGitkeep, map[string]*bintree{}},
				"4.sql":    &bintree{migrationsSqlMysql4Sql, map[string]*bintree{}},
			}},
			"postgres": &bintree{nil, map[string]*bintree{
				".gitkeep": &bintree{migrationsSqlPostgresGitkeep, map[string]*bintree{}},
				"4.sql":    &bintree{migrationsSqlPostgres4Sql, map[string]*bintree{}},
			}},
			"shared": &bintree{nil, map[string]*bintree{
				"1.sql": &bintree{migrationsSqlShared1Sql, map[string]*bintree{}},
				"2.sql": &bintree{migrationsSqlShared2Sql, map[string]*bintree{}},
				"3.sql": &bintree{migrationsSqlShared3Sql, map[string]*bintree{}},
			}},
			"tests": &bintree{nil, map[string]*bintree{
				".gitkeep":   &bintree{migrationsSqlTestsGitkeep, map[string]*bintree{}},
				"1_test.sql": &bintree{migrationsSqlTests1_testSql, map[string]*bintree{}},
				"2_test.sql": &bintree{migrationsSqlTests2_testSql, map[string]*bintree{}},
				"3_test.sql": &bintree{migrationsSqlTests3_testSql, map[string]*bintree{}},
				"4_test.sql": &bintree{migrationsSqlTests4_testSql, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
