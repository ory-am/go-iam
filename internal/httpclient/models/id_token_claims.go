// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IDTokenClaims IDTokenClaims represent the claims used in open id connect requests
//
// swagger:model IDTokenClaims
type IDTokenClaims struct {

	// acr
	Acr string `json:"acr,omitempty"`

	// amr
	Amr []string `json:"amr"`

	// at hash
	AtHash string `json:"at_hash,omitempty"`

	// aud
	Aud []string `json:"aud"`

	// auth time
	// Format: date-time
	AuthTime strfmt.DateTime `json:"auth_time,omitempty"`

	// c hash
	CHash string `json:"c_hash,omitempty"`

	// exp
	// Format: date-time
	Exp strfmt.DateTime `json:"exp,omitempty"`

	// ext
	Ext interface{} `json:"ext,omitempty"`

	// iat
	// Format: date-time
	Iat strfmt.DateTime `json:"iat,omitempty"`

	// iss
	Iss string `json:"iss,omitempty"`

	// jti
	Jti string `json:"jti,omitempty"`

	// nonce
	Nonce string `json:"nonce,omitempty"`

	// rat
	// Format: date-time
	Rat strfmt.DateTime `json:"rat,omitempty"`

	// sub
	Sub string `json:"sub,omitempty"`
}

// Validate validates this ID token claims
func (m *IDTokenClaims) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRat(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IDTokenClaims) validateAuthTime(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthTime) { // not required
		return nil
	}

	if err := validate.FormatOf("auth_time", "body", "date-time", m.AuthTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IDTokenClaims) validateExp(formats strfmt.Registry) error {
	if swag.IsZero(m.Exp) { // not required
		return nil
	}

	if err := validate.FormatOf("exp", "body", "date-time", m.Exp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IDTokenClaims) validateIat(formats strfmt.Registry) error {
	if swag.IsZero(m.Iat) { // not required
		return nil
	}

	if err := validate.FormatOf("iat", "body", "date-time", m.Iat.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IDTokenClaims) validateRat(formats strfmt.Registry) error {
	if swag.IsZero(m.Rat) { // not required
		return nil
	}

	if err := validate.FormatOf("rat", "body", "date-time", m.Rat.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this ID token claims based on context it is used
func (m *IDTokenClaims) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IDTokenClaims) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IDTokenClaims) UnmarshalBinary(b []byte) error {
	var res IDTokenClaims
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
