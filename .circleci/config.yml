# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  format:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/ory/hydra
    steps:
# This is disabled for now because goimports is really slow when go modules are used, see
# https://github.com/golang/go/issues/27287
#
#      - run:
#          name: Enable go1.12 modules
#          command: |
#            echo 'export GO111MODULE=on' >> $BASH_ENV
#            source $BASH_ENV
      - checkout
      - run:
          name: Enable go1.12 modules
          command: |
            echo 'export GO111MODULE=on' >> $BASH_ENV
            source $BASH_ENV
      - run: curl -L https://git.io/vp6lP | sh -s -- -b ./bin
      - run: mv ./bin/* $GOPATH/bin
      - run: go mod download
      - run: go mod vendor
      - run: GO111MODULE=off gometalinter --disable-all --enable=goimports --enable=vet --vendor ./...

  test:
    docker:
      - image: circleci/golang:1.12
        environment:
        - TEST_DATABASE_POSTGRESQL=postgres://test:test@localhost:5432/hydra?sslmode=disable
        - TEST_DATABASE_MYSQL=root:test@(localhost:3306)/mysql?parseTime=true
      - image: postgres:9.6
        environment:
        - POSTGRES_USER=test
        - POSTGRES_PASSWORD=test
        - POSTGRES_DB=hydra
      - image: mysql:5.7
        environment:
        - MYSQL_ROOT_PASSWORD=test
    working_directory: /go/src/github.com/ory/hydra
    steps:
      - run:
          name: Enable go1.12 modules
          command: |
            echo 'export GO111MODULE=on' >> $BASH_ENV
            source $BASH_ENV
      - checkout
      - run: go mod download
      - run: GO111MODULE=off go get github.com/mattn/goveralls github.com/ory/go-acc
      - run: go-acc -o coverage.txt ./... -- -failfast -timeout=20m
#      Running race conditions requires parallel tests, otherwise it's worthless (which is the case)
#      - run: go test -race -short $(go list ./... | grep -v cmd)
      - run: test -z "$CIRCLE_PR_NUMBER" && goveralls -service=circle-ci -coverprofile=coverage.txt -repotoken=$COVERALLS_REPO_TOKEN || echo "forks are not allowed to push to coveralls"

  e2e-memory:
    docker:
    - image: circleci/node:11.10.0
    steps:
    - checkout
    - setup_remote_docker
    - run: make tools
    - run: make e2e-memory

  e2e-memory-jwt:
    docker:
    - image: circleci/node:11.10.0
    steps:
    - checkout
    - setup_remote_docker
    - run: make tools
    - run: make e2e-memory-jwt

  e2e-mysql:
    docker:
    - image: circleci/node:11.10.0
    steps:
    - checkout
    - setup_remote_docker
    - run: make tools
    - run: make e2e-mysql

  e2e-mysql-jwt:
    docker:
    - image: circleci/node:11.10.0
    steps:
    - checkout
    - setup_remote_docker
    - run: make tools
    - run: make e2e-mysql-jwt

  e2e-plugin:
    docker:
    - image: circleci/node:11.10.0
    steps:
    - checkout
    - setup_remote_docker
    - run: make tools
    - run: make e2e-plugin

  e2e-plugin-jwt:
    docker:
    - image: circleci/node:11.10.0
    steps:
    - checkout
    - setup_remote_docker
    - run: make tools
    - run: make e2e-plugin-jwt

  e2e-postgres:
    docker:
    - image: circleci/node:11.10.0
    steps:
    - checkout
    - setup_remote_docker
    - run: make tools
    - run: make e2e-postgres

  e2e-postgres-jwt:
    docker:
    - image: circleci/node:11.10.0
    steps:
    - checkout
    - setup_remote_docker
    - run: make tools
    - run: make e2e-postgres-jwt

  release-npm:
    docker:
      - image: circleci/node:8.9.3
    working_directory: ~/hydra
    steps:
      - checkout
      - run: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
      - run: |
          npm version -f --no-git-tag-version $CIRCLE_TAG
      - run: npm publish --access public

  release-changelog:
    docker:
      - image: circleci/ruby:2.4-node
    steps:
      - checkout
      - run: gem install github_changelog_generator
      - run: sudo npm i -g doctoc
      - run: github_changelog_generator -u ory -p hydra -o CHANGELOG.md --token $GITHUB_TOKEN
      - run: doctoc CHANGELOG.md
      - run: git config --global user.email "circleci@ory.am"
      - run: git config --global user.name "ORY Continuous Integration"
      - run: git add CHANGELOG.md
      - run: |
          git commit -m "docs: Incorporates changes from version $(git describe --tags)" -- CHANGELOG.md
      - run: git remote rm origin
      - run: git remote add origin https://arekkas:$GITHUB_TOKEN@github.com/ory/hydra.git
      - run: git push origin HEAD:master

  release-docs:
    docker:
      - image: alpine/git:1.0.4
    working_directory: /go/src/github.com/ory/hydra
    steps:
      - checkout
      - run: git config --global user.email "hi@ory.am"
      - run: git config --global user.name "ORY Continuous Integration"
      - run: "git clone https://arekkas:$DOCS_TOKEN_PUSH@github.com/ory/docs.git ../docs"
      - run: "cp ./docs/api.swagger.json ../docs/apis/hydra.json"
      - run: "(cd ../docs && git add -A && git commit -a -m \"Updates ORY Hydra Swagger definitions\" && git push origin) || exit 0"

  benchmark:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/ory/hydra
    steps:
      - run:
          name: Enable go1.12 modules
          command: |
            echo 'export GO111MODULE=on' >> $BASH_ENV
            source $BASH_ENV
      - checkout
      - run: git config --global user.email "hi@ory.am"
      - run: git config --global user.name "ORY Continuous Integration"
      - run: go get -u github.com/rakyll/hey
      - run: go install .
      - run: ./scripts/run-bench.sh
      - run: ./scripts/run-configuration.sh
      - run: "git clone https://arekkas:$DOCS_TOKEN_PUSH@github.com/ory/docs.git ../docs"
      - run: "cp BENCHMARKS.md ../docs/docs/performance/hydra.md"
      - run: "cp configuration.md ../docs/docs/hydra/configuration.md"
      - run: "(cd ../docs && git add -A && git commit -a -m \"Updates ORY Hydra autogenerated docs\" && git push origin) || exit 0"

  release:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/ory/hydra
    steps:
      - run:
          name: Enable go1.12 modules
          command: |
            echo 'export GO111MODULE=on' >> $BASH_ENV
            echo 'export DOCKER_FULL_TAG=$(echo $CIRCLE_TAG | tr '+' '_')' >> $BASH_ENV
            echo 'export DOCKER_SHORT_TAG=$(echo $CIRCLE_TAG | cut -d '+' -f1)' >> $BASH_ENV
            source $BASH_ENV
      - checkout
      - setup_remote_docker
      - run: docker login --username "$DOCKER_USERNAME" --password "$DOCKER_PASSWORD"
      - run: cp ./.releaser/LICENSE.txt ./LICENSE.txt
      - run: curl -sL https://git.io/goreleaser | bash

workflows:
  version: 2
  "test, build, push, and deploy":
    jobs:
      - format:
          filters:
            tags:
              only: /.*/
      - test:
          filters:
            tags:
              only: /.*/
      - e2e-memory:
          filters:
            tags:
              only: /.*/
      - e2e-memory-jwt:
          filters:
            tags:
              only: /.*/
      - e2e-mysql:
          filters:
            tags:
              only: /.*/
      - e2e-mysql-jwt:
          filters:
            tags:
              only: /.*/
      - e2e-plugin:
          filters:
            tags:
              only: /.*/
      - e2e-plugin-jwt:
          filters:
            tags:
              only: /.*/
      - e2e-postgres:
          filters:
            tags:
              only: /.*/
      - e2e-postgres-jwt:
          filters:
            tags:
              only: /.*/
      - release-docs:
          requires:
            - test
          filters:
            branches:
              only: master
      - benchmark:
          # Avoids race conditions when pushing
          requires:
            - release-docs
          filters:
            branches:
              only: master
      - release:
          requires:
            - test
            - format
            - e2e-memory
            - e2e-memory-jwt
            - e2e-mysql
            - e2e-mysql-jwt
            - e2e-plugin
            - e2e-plugin-jwt
            - e2e-postgres
            - e2e-postgres-jwt
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - release-npm:
          requires:
            - release
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - release-changelog:
          requires:
            - release
            - release-npm
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
