<?php
/**
 * Certificate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Hydra\SDK
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ORY Hydra - Cloud Native OAuth 2.0 and OpenID Connect Server
 *
 * Welcome to the ORY Hydra HTTP API documentation. You will find documentation for all HTTP APIs here. Keep in mind that this document reflects the latest branch, always. Support for versioned documentation is coming in the future.
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Hydra\SDK\Model;

use \ArrayAccess;

/**
 * Certificate Class Doc Comment
 *
 * @category    Class
 * @package     Hydra\SDK
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Certificate implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Certificate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'authority_key_id' => 'int[]',
        'basic_constraints_valid' => 'bool',
        'crl_distribution_points' => 'string[]',
        'dns_names' => 'string[]',
        'email_addresses' => 'string[]',
        'excluded_dns_domains' => 'string[]',
        'excluded_email_addresses' => 'string[]',
        'excluded_ip_ranges' => '\Hydra\SDK\Model\IPNet[]',
        'excluded_uri_domains' => 'string[]',
        'ext_key_usage' => '\Hydra\SDK\Model\ExtKeyUsage[]',
        'extensions' => '\Hydra\SDK\Model\Extension[]',
        'extra_extensions' => '\Hydra\SDK\Model\Extension[]',
        'ip_addresses' => '\Hydra\SDK\Model\IP[]',
        'is_ca' => 'bool',
        'issuer' => '\Hydra\SDK\Model\Name',
        'issuing_certificate_url' => 'string[]',
        'key_usage' => '\Hydra\SDK\Model\KeyUsage',
        'max_path_len' => 'int',
        'max_path_len_zero' => 'bool',
        'not_before' => '\DateTime',
        'ocsp_server' => 'string[]',
        'permitted_dns_domains' => 'string[]',
        'permitted_dns_domains_critical' => 'bool',
        'permitted_email_addresses' => 'string[]',
        'permitted_ip_ranges' => '\Hydra\SDK\Model\IPNet[]',
        'permitted_uri_domains' => 'string[]',
        'policy_identifiers' => '\Hydra\SDK\Model\ObjectIdentifier[]',
        'public_key' => 'object',
        'public_key_algorithm' => '\Hydra\SDK\Model\PublicKeyAlgorithm',
        'raw' => 'int[]',
        'raw_issuer' => 'int[]',
        'raw_subject' => 'int[]',
        'raw_subject_public_key_info' => 'int[]',
        'raw_tbs_certificate' => 'int[]',
        'serial_number' => '\Hydra\SDK\Model\Int',
        'signature' => 'int[]',
        'signature_algorithm' => '\Hydra\SDK\Model\SignatureAlgorithm',
        'subject' => '\Hydra\SDK\Model\Name',
        'subject_key_id' => 'int[]',
        'ur_is' => '\Hydra\SDK\Model\URL[]',
        'unhandled_critical_extensions' => '\Hydra\SDK\Model\ObjectIdentifier[]',
        'unknown_ext_key_usage' => '\Hydra\SDK\Model\ObjectIdentifier[]',
        'version' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'authority_key_id' => 'uint8',
        'basic_constraints_valid' => null,
        'crl_distribution_points' => null,
        'dns_names' => null,
        'email_addresses' => null,
        'excluded_dns_domains' => null,
        'excluded_email_addresses' => null,
        'excluded_ip_ranges' => null,
        'excluded_uri_domains' => null,
        'ext_key_usage' => null,
        'extensions' => null,
        'extra_extensions' => null,
        'ip_addresses' => null,
        'is_ca' => null,
        'issuer' => null,
        'issuing_certificate_url' => null,
        'key_usage' => null,
        'max_path_len' => 'int64',
        'max_path_len_zero' => null,
        'not_before' => 'date-time',
        'ocsp_server' => null,
        'permitted_dns_domains' => null,
        'permitted_dns_domains_critical' => null,
        'permitted_email_addresses' => null,
        'permitted_ip_ranges' => null,
        'permitted_uri_domains' => null,
        'policy_identifiers' => null,
        'public_key' => null,
        'public_key_algorithm' => null,
        'raw' => 'uint8',
        'raw_issuer' => 'uint8',
        'raw_subject' => 'uint8',
        'raw_subject_public_key_info' => 'uint8',
        'raw_tbs_certificate' => 'uint8',
        'serial_number' => null,
        'signature' => 'uint8',
        'signature_algorithm' => null,
        'subject' => null,
        'subject_key_id' => 'uint8',
        'ur_is' => null,
        'unhandled_critical_extensions' => null,
        'unknown_ext_key_usage' => null,
        'version' => 'int64'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'authority_key_id' => 'AuthorityKeyId',
        'basic_constraints_valid' => 'BasicConstraintsValid',
        'crl_distribution_points' => 'CRLDistributionPoints',
        'dns_names' => 'DNSNames',
        'email_addresses' => 'EmailAddresses',
        'excluded_dns_domains' => 'ExcludedDNSDomains',
        'excluded_email_addresses' => 'ExcludedEmailAddresses',
        'excluded_ip_ranges' => 'ExcludedIPRanges',
        'excluded_uri_domains' => 'ExcludedURIDomains',
        'ext_key_usage' => 'ExtKeyUsage',
        'extensions' => 'Extensions',
        'extra_extensions' => 'ExtraExtensions',
        'ip_addresses' => 'IPAddresses',
        'is_ca' => 'IsCA',
        'issuer' => 'Issuer',
        'issuing_certificate_url' => 'IssuingCertificateURL',
        'key_usage' => 'KeyUsage',
        'max_path_len' => 'MaxPathLen',
        'max_path_len_zero' => 'MaxPathLenZero',
        'not_before' => 'NotBefore',
        'ocsp_server' => 'OCSPServer',
        'permitted_dns_domains' => 'PermittedDNSDomains',
        'permitted_dns_domains_critical' => 'PermittedDNSDomainsCritical',
        'permitted_email_addresses' => 'PermittedEmailAddresses',
        'permitted_ip_ranges' => 'PermittedIPRanges',
        'permitted_uri_domains' => 'PermittedURIDomains',
        'policy_identifiers' => 'PolicyIdentifiers',
        'public_key' => 'PublicKey',
        'public_key_algorithm' => 'PublicKeyAlgorithm',
        'raw' => 'Raw',
        'raw_issuer' => 'RawIssuer',
        'raw_subject' => 'RawSubject',
        'raw_subject_public_key_info' => 'RawSubjectPublicKeyInfo',
        'raw_tbs_certificate' => 'RawTBSCertificate',
        'serial_number' => 'SerialNumber',
        'signature' => 'Signature',
        'signature_algorithm' => 'SignatureAlgorithm',
        'subject' => 'Subject',
        'subject_key_id' => 'SubjectKeyId',
        'ur_is' => 'URIs',
        'unhandled_critical_extensions' => 'UnhandledCriticalExtensions',
        'unknown_ext_key_usage' => 'UnknownExtKeyUsage',
        'version' => 'Version'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'authority_key_id' => 'setAuthorityKeyId',
        'basic_constraints_valid' => 'setBasicConstraintsValid',
        'crl_distribution_points' => 'setCrlDistributionPoints',
        'dns_names' => 'setDnsNames',
        'email_addresses' => 'setEmailAddresses',
        'excluded_dns_domains' => 'setExcludedDnsDomains',
        'excluded_email_addresses' => 'setExcludedEmailAddresses',
        'excluded_ip_ranges' => 'setExcludedIpRanges',
        'excluded_uri_domains' => 'setExcludedUriDomains',
        'ext_key_usage' => 'setExtKeyUsage',
        'extensions' => 'setExtensions',
        'extra_extensions' => 'setExtraExtensions',
        'ip_addresses' => 'setIpAddresses',
        'is_ca' => 'setIsCa',
        'issuer' => 'setIssuer',
        'issuing_certificate_url' => 'setIssuingCertificateUrl',
        'key_usage' => 'setKeyUsage',
        'max_path_len' => 'setMaxPathLen',
        'max_path_len_zero' => 'setMaxPathLenZero',
        'not_before' => 'setNotBefore',
        'ocsp_server' => 'setOcspServer',
        'permitted_dns_domains' => 'setPermittedDnsDomains',
        'permitted_dns_domains_critical' => 'setPermittedDnsDomainsCritical',
        'permitted_email_addresses' => 'setPermittedEmailAddresses',
        'permitted_ip_ranges' => 'setPermittedIpRanges',
        'permitted_uri_domains' => 'setPermittedUriDomains',
        'policy_identifiers' => 'setPolicyIdentifiers',
        'public_key' => 'setPublicKey',
        'public_key_algorithm' => 'setPublicKeyAlgorithm',
        'raw' => 'setRaw',
        'raw_issuer' => 'setRawIssuer',
        'raw_subject' => 'setRawSubject',
        'raw_subject_public_key_info' => 'setRawSubjectPublicKeyInfo',
        'raw_tbs_certificate' => 'setRawTbsCertificate',
        'serial_number' => 'setSerialNumber',
        'signature' => 'setSignature',
        'signature_algorithm' => 'setSignatureAlgorithm',
        'subject' => 'setSubject',
        'subject_key_id' => 'setSubjectKeyId',
        'ur_is' => 'setUrIs',
        'unhandled_critical_extensions' => 'setUnhandledCriticalExtensions',
        'unknown_ext_key_usage' => 'setUnknownExtKeyUsage',
        'version' => 'setVersion'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'authority_key_id' => 'getAuthorityKeyId',
        'basic_constraints_valid' => 'getBasicConstraintsValid',
        'crl_distribution_points' => 'getCrlDistributionPoints',
        'dns_names' => 'getDnsNames',
        'email_addresses' => 'getEmailAddresses',
        'excluded_dns_domains' => 'getExcludedDnsDomains',
        'excluded_email_addresses' => 'getExcludedEmailAddresses',
        'excluded_ip_ranges' => 'getExcludedIpRanges',
        'excluded_uri_domains' => 'getExcludedUriDomains',
        'ext_key_usage' => 'getExtKeyUsage',
        'extensions' => 'getExtensions',
        'extra_extensions' => 'getExtraExtensions',
        'ip_addresses' => 'getIpAddresses',
        'is_ca' => 'getIsCa',
        'issuer' => 'getIssuer',
        'issuing_certificate_url' => 'getIssuingCertificateUrl',
        'key_usage' => 'getKeyUsage',
        'max_path_len' => 'getMaxPathLen',
        'max_path_len_zero' => 'getMaxPathLenZero',
        'not_before' => 'getNotBefore',
        'ocsp_server' => 'getOcspServer',
        'permitted_dns_domains' => 'getPermittedDnsDomains',
        'permitted_dns_domains_critical' => 'getPermittedDnsDomainsCritical',
        'permitted_email_addresses' => 'getPermittedEmailAddresses',
        'permitted_ip_ranges' => 'getPermittedIpRanges',
        'permitted_uri_domains' => 'getPermittedUriDomains',
        'policy_identifiers' => 'getPolicyIdentifiers',
        'public_key' => 'getPublicKey',
        'public_key_algorithm' => 'getPublicKeyAlgorithm',
        'raw' => 'getRaw',
        'raw_issuer' => 'getRawIssuer',
        'raw_subject' => 'getRawSubject',
        'raw_subject_public_key_info' => 'getRawSubjectPublicKeyInfo',
        'raw_tbs_certificate' => 'getRawTbsCertificate',
        'serial_number' => 'getSerialNumber',
        'signature' => 'getSignature',
        'signature_algorithm' => 'getSignatureAlgorithm',
        'subject' => 'getSubject',
        'subject_key_id' => 'getSubjectKeyId',
        'ur_is' => 'getUrIs',
        'unhandled_critical_extensions' => 'getUnhandledCriticalExtensions',
        'unknown_ext_key_usage' => 'getUnknownExtKeyUsage',
        'version' => 'getVersion'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['authority_key_id'] = isset($data['authority_key_id']) ? $data['authority_key_id'] : null;
        $this->container['basic_constraints_valid'] = isset($data['basic_constraints_valid']) ? $data['basic_constraints_valid'] : null;
        $this->container['crl_distribution_points'] = isset($data['crl_distribution_points']) ? $data['crl_distribution_points'] : null;
        $this->container['dns_names'] = isset($data['dns_names']) ? $data['dns_names'] : null;
        $this->container['email_addresses'] = isset($data['email_addresses']) ? $data['email_addresses'] : null;
        $this->container['excluded_dns_domains'] = isset($data['excluded_dns_domains']) ? $data['excluded_dns_domains'] : null;
        $this->container['excluded_email_addresses'] = isset($data['excluded_email_addresses']) ? $data['excluded_email_addresses'] : null;
        $this->container['excluded_ip_ranges'] = isset($data['excluded_ip_ranges']) ? $data['excluded_ip_ranges'] : null;
        $this->container['excluded_uri_domains'] = isset($data['excluded_uri_domains']) ? $data['excluded_uri_domains'] : null;
        $this->container['ext_key_usage'] = isset($data['ext_key_usage']) ? $data['ext_key_usage'] : null;
        $this->container['extensions'] = isset($data['extensions']) ? $data['extensions'] : null;
        $this->container['extra_extensions'] = isset($data['extra_extensions']) ? $data['extra_extensions'] : null;
        $this->container['ip_addresses'] = isset($data['ip_addresses']) ? $data['ip_addresses'] : null;
        $this->container['is_ca'] = isset($data['is_ca']) ? $data['is_ca'] : null;
        $this->container['issuer'] = isset($data['issuer']) ? $data['issuer'] : null;
        $this->container['issuing_certificate_url'] = isset($data['issuing_certificate_url']) ? $data['issuing_certificate_url'] : null;
        $this->container['key_usage'] = isset($data['key_usage']) ? $data['key_usage'] : null;
        $this->container['max_path_len'] = isset($data['max_path_len']) ? $data['max_path_len'] : null;
        $this->container['max_path_len_zero'] = isset($data['max_path_len_zero']) ? $data['max_path_len_zero'] : null;
        $this->container['not_before'] = isset($data['not_before']) ? $data['not_before'] : null;
        $this->container['ocsp_server'] = isset($data['ocsp_server']) ? $data['ocsp_server'] : null;
        $this->container['permitted_dns_domains'] = isset($data['permitted_dns_domains']) ? $data['permitted_dns_domains'] : null;
        $this->container['permitted_dns_domains_critical'] = isset($data['permitted_dns_domains_critical']) ? $data['permitted_dns_domains_critical'] : null;
        $this->container['permitted_email_addresses'] = isset($data['permitted_email_addresses']) ? $data['permitted_email_addresses'] : null;
        $this->container['permitted_ip_ranges'] = isset($data['permitted_ip_ranges']) ? $data['permitted_ip_ranges'] : null;
        $this->container['permitted_uri_domains'] = isset($data['permitted_uri_domains']) ? $data['permitted_uri_domains'] : null;
        $this->container['policy_identifiers'] = isset($data['policy_identifiers']) ? $data['policy_identifiers'] : null;
        $this->container['public_key'] = isset($data['public_key']) ? $data['public_key'] : null;
        $this->container['public_key_algorithm'] = isset($data['public_key_algorithm']) ? $data['public_key_algorithm'] : null;
        $this->container['raw'] = isset($data['raw']) ? $data['raw'] : null;
        $this->container['raw_issuer'] = isset($data['raw_issuer']) ? $data['raw_issuer'] : null;
        $this->container['raw_subject'] = isset($data['raw_subject']) ? $data['raw_subject'] : null;
        $this->container['raw_subject_public_key_info'] = isset($data['raw_subject_public_key_info']) ? $data['raw_subject_public_key_info'] : null;
        $this->container['raw_tbs_certificate'] = isset($data['raw_tbs_certificate']) ? $data['raw_tbs_certificate'] : null;
        $this->container['serial_number'] = isset($data['serial_number']) ? $data['serial_number'] : null;
        $this->container['signature'] = isset($data['signature']) ? $data['signature'] : null;
        $this->container['signature_algorithm'] = isset($data['signature_algorithm']) ? $data['signature_algorithm'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['subject_key_id'] = isset($data['subject_key_id']) ? $data['subject_key_id'] : null;
        $this->container['ur_is'] = isset($data['ur_is']) ? $data['ur_is'] : null;
        $this->container['unhandled_critical_extensions'] = isset($data['unhandled_critical_extensions']) ? $data['unhandled_critical_extensions'] : null;
        $this->container['unknown_ext_key_usage'] = isset($data['unknown_ext_key_usage']) ? $data['unknown_ext_key_usage'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets authority_key_id
     * @return int[]
     */
    public function getAuthorityKeyId()
    {
        return $this->container['authority_key_id'];
    }

    /**
     * Sets authority_key_id
     * @param int[] $authority_key_id
     * @return $this
     */
    public function setAuthorityKeyId($authority_key_id)
    {
        $this->container['authority_key_id'] = $authority_key_id;

        return $this;
    }

    /**
     * Gets basic_constraints_valid
     * @return bool
     */
    public function getBasicConstraintsValid()
    {
        return $this->container['basic_constraints_valid'];
    }

    /**
     * Sets basic_constraints_valid
     * @param bool $basic_constraints_valid BasicConstraintsValid indicates whether IsCA, MaxPathLen, and MaxPathLenZero are valid.
     * @return $this
     */
    public function setBasicConstraintsValid($basic_constraints_valid)
    {
        $this->container['basic_constraints_valid'] = $basic_constraints_valid;

        return $this;
    }

    /**
     * Gets crl_distribution_points
     * @return string[]
     */
    public function getCrlDistributionPoints()
    {
        return $this->container['crl_distribution_points'];
    }

    /**
     * Sets crl_distribution_points
     * @param string[] $crl_distribution_points CRL Distribution Points
     * @return $this
     */
    public function setCrlDistributionPoints($crl_distribution_points)
    {
        $this->container['crl_distribution_points'] = $crl_distribution_points;

        return $this;
    }

    /**
     * Gets dns_names
     * @return string[]
     */
    public function getDnsNames()
    {
        return $this->container['dns_names'];
    }

    /**
     * Sets dns_names
     * @param string[] $dns_names Subject Alternate Name values. (Note that these values may not be valid if invalid values were contained within a parsed certificate. For example, an element of DNSNames may not be a valid DNS domain name.)
     * @return $this
     */
    public function setDnsNames($dns_names)
    {
        $this->container['dns_names'] = $dns_names;

        return $this;
    }

    /**
     * Gets email_addresses
     * @return string[]
     */
    public function getEmailAddresses()
    {
        return $this->container['email_addresses'];
    }

    /**
     * Sets email_addresses
     * @param string[] $email_addresses
     * @return $this
     */
    public function setEmailAddresses($email_addresses)
    {
        $this->container['email_addresses'] = $email_addresses;

        return $this;
    }

    /**
     * Gets excluded_dns_domains
     * @return string[]
     */
    public function getExcludedDnsDomains()
    {
        return $this->container['excluded_dns_domains'];
    }

    /**
     * Sets excluded_dns_domains
     * @param string[] $excluded_dns_domains
     * @return $this
     */
    public function setExcludedDnsDomains($excluded_dns_domains)
    {
        $this->container['excluded_dns_domains'] = $excluded_dns_domains;

        return $this;
    }

    /**
     * Gets excluded_email_addresses
     * @return string[]
     */
    public function getExcludedEmailAddresses()
    {
        return $this->container['excluded_email_addresses'];
    }

    /**
     * Sets excluded_email_addresses
     * @param string[] $excluded_email_addresses
     * @return $this
     */
    public function setExcludedEmailAddresses($excluded_email_addresses)
    {
        $this->container['excluded_email_addresses'] = $excluded_email_addresses;

        return $this;
    }

    /**
     * Gets excluded_ip_ranges
     * @return \Hydra\SDK\Model\IPNet[]
     */
    public function getExcludedIpRanges()
    {
        return $this->container['excluded_ip_ranges'];
    }

    /**
     * Sets excluded_ip_ranges
     * @param \Hydra\SDK\Model\IPNet[] $excluded_ip_ranges
     * @return $this
     */
    public function setExcludedIpRanges($excluded_ip_ranges)
    {
        $this->container['excluded_ip_ranges'] = $excluded_ip_ranges;

        return $this;
    }

    /**
     * Gets excluded_uri_domains
     * @return string[]
     */
    public function getExcludedUriDomains()
    {
        return $this->container['excluded_uri_domains'];
    }

    /**
     * Sets excluded_uri_domains
     * @param string[] $excluded_uri_domains
     * @return $this
     */
    public function setExcludedUriDomains($excluded_uri_domains)
    {
        $this->container['excluded_uri_domains'] = $excluded_uri_domains;

        return $this;
    }

    /**
     * Gets ext_key_usage
     * @return \Hydra\SDK\Model\ExtKeyUsage[]
     */
    public function getExtKeyUsage()
    {
        return $this->container['ext_key_usage'];
    }

    /**
     * Sets ext_key_usage
     * @param \Hydra\SDK\Model\ExtKeyUsage[] $ext_key_usage
     * @return $this
     */
    public function setExtKeyUsage($ext_key_usage)
    {
        $this->container['ext_key_usage'] = $ext_key_usage;

        return $this;
    }

    /**
     * Gets extensions
     * @return \Hydra\SDK\Model\Extension[]
     */
    public function getExtensions()
    {
        return $this->container['extensions'];
    }

    /**
     * Sets extensions
     * @param \Hydra\SDK\Model\Extension[] $extensions Extensions contains raw X.509 extensions. When parsing certificates, this can be used to extract non-critical extensions that are not parsed by this package. When marshaling certificates, the Extensions field is ignored, see ExtraExtensions.
     * @return $this
     */
    public function setExtensions($extensions)
    {
        $this->container['extensions'] = $extensions;

        return $this;
    }

    /**
     * Gets extra_extensions
     * @return \Hydra\SDK\Model\Extension[]
     */
    public function getExtraExtensions()
    {
        return $this->container['extra_extensions'];
    }

    /**
     * Sets extra_extensions
     * @param \Hydra\SDK\Model\Extension[] $extra_extensions ExtraExtensions contains extensions to be copied, raw, into any marshaled certificates. Values override any extensions that would otherwise be produced based on the other fields. The ExtraExtensions field is not populated when parsing certificates, see Extensions.
     * @return $this
     */
    public function setExtraExtensions($extra_extensions)
    {
        $this->container['extra_extensions'] = $extra_extensions;

        return $this;
    }

    /**
     * Gets ip_addresses
     * @return \Hydra\SDK\Model\IP[]
     */
    public function getIpAddresses()
    {
        return $this->container['ip_addresses'];
    }

    /**
     * Sets ip_addresses
     * @param \Hydra\SDK\Model\IP[] $ip_addresses
     * @return $this
     */
    public function setIpAddresses($ip_addresses)
    {
        $this->container['ip_addresses'] = $ip_addresses;

        return $this;
    }

    /**
     * Gets is_ca
     * @return bool
     */
    public function getIsCa()
    {
        return $this->container['is_ca'];
    }

    /**
     * Sets is_ca
     * @param bool $is_ca
     * @return $this
     */
    public function setIsCa($is_ca)
    {
        $this->container['is_ca'] = $is_ca;

        return $this;
    }

    /**
     * Gets issuer
     * @return \Hydra\SDK\Model\Name
     */
    public function getIssuer()
    {
        return $this->container['issuer'];
    }

    /**
     * Sets issuer
     * @param \Hydra\SDK\Model\Name $issuer
     * @return $this
     */
    public function setIssuer($issuer)
    {
        $this->container['issuer'] = $issuer;

        return $this;
    }

    /**
     * Gets issuing_certificate_url
     * @return string[]
     */
    public function getIssuingCertificateUrl()
    {
        return $this->container['issuing_certificate_url'];
    }

    /**
     * Sets issuing_certificate_url
     * @param string[] $issuing_certificate_url
     * @return $this
     */
    public function setIssuingCertificateUrl($issuing_certificate_url)
    {
        $this->container['issuing_certificate_url'] = $issuing_certificate_url;

        return $this;
    }

    /**
     * Gets key_usage
     * @return \Hydra\SDK\Model\KeyUsage
     */
    public function getKeyUsage()
    {
        return $this->container['key_usage'];
    }

    /**
     * Sets key_usage
     * @param \Hydra\SDK\Model\KeyUsage $key_usage
     * @return $this
     */
    public function setKeyUsage($key_usage)
    {
        $this->container['key_usage'] = $key_usage;

        return $this;
    }

    /**
     * Gets max_path_len
     * @return int
     */
    public function getMaxPathLen()
    {
        return $this->container['max_path_len'];
    }

    /**
     * Sets max_path_len
     * @param int $max_path_len MaxPathLen and MaxPathLenZero indicate the presence and value of the BasicConstraints' \"pathLenConstraint\".  When parsing a certificate, a positive non-zero MaxPathLen means that the field was specified, -1 means it was unset, and MaxPathLenZero being true mean that the field was explicitly set to zero. The case of MaxPathLen==0 with MaxPathLenZero==false should be treated equivalent to -1 (unset).  When generating a certificate, an unset pathLenConstraint can be requested with either MaxPathLen == -1 or using the zero value for both MaxPathLen and MaxPathLenZero.
     * @return $this
     */
    public function setMaxPathLen($max_path_len)
    {
        $this->container['max_path_len'] = $max_path_len;

        return $this;
    }

    /**
     * Gets max_path_len_zero
     * @return bool
     */
    public function getMaxPathLenZero()
    {
        return $this->container['max_path_len_zero'];
    }

    /**
     * Sets max_path_len_zero
     * @param bool $max_path_len_zero MaxPathLenZero indicates that BasicConstraintsValid==true and MaxPathLen==0 should be interpreted as an actual maximum path length of zero. Otherwise, that combination is interpreted as MaxPathLen not being set.
     * @return $this
     */
    public function setMaxPathLenZero($max_path_len_zero)
    {
        $this->container['max_path_len_zero'] = $max_path_len_zero;

        return $this;
    }

    /**
     * Gets not_before
     * @return \DateTime
     */
    public function getNotBefore()
    {
        return $this->container['not_before'];
    }

    /**
     * Sets not_before
     * @param \DateTime $not_before
     * @return $this
     */
    public function setNotBefore($not_before)
    {
        $this->container['not_before'] = $not_before;

        return $this;
    }

    /**
     * Gets ocsp_server
     * @return string[]
     */
    public function getOcspServer()
    {
        return $this->container['ocsp_server'];
    }

    /**
     * Sets ocsp_server
     * @param string[] $ocsp_server RFC 5280, 4.2.2.1 (Authority Information Access)
     * @return $this
     */
    public function setOcspServer($ocsp_server)
    {
        $this->container['ocsp_server'] = $ocsp_server;

        return $this;
    }

    /**
     * Gets permitted_dns_domains
     * @return string[]
     */
    public function getPermittedDnsDomains()
    {
        return $this->container['permitted_dns_domains'];
    }

    /**
     * Sets permitted_dns_domains
     * @param string[] $permitted_dns_domains
     * @return $this
     */
    public function setPermittedDnsDomains($permitted_dns_domains)
    {
        $this->container['permitted_dns_domains'] = $permitted_dns_domains;

        return $this;
    }

    /**
     * Gets permitted_dns_domains_critical
     * @return bool
     */
    public function getPermittedDnsDomainsCritical()
    {
        return $this->container['permitted_dns_domains_critical'];
    }

    /**
     * Sets permitted_dns_domains_critical
     * @param bool $permitted_dns_domains_critical Name constraints
     * @return $this
     */
    public function setPermittedDnsDomainsCritical($permitted_dns_domains_critical)
    {
        $this->container['permitted_dns_domains_critical'] = $permitted_dns_domains_critical;

        return $this;
    }

    /**
     * Gets permitted_email_addresses
     * @return string[]
     */
    public function getPermittedEmailAddresses()
    {
        return $this->container['permitted_email_addresses'];
    }

    /**
     * Sets permitted_email_addresses
     * @param string[] $permitted_email_addresses
     * @return $this
     */
    public function setPermittedEmailAddresses($permitted_email_addresses)
    {
        $this->container['permitted_email_addresses'] = $permitted_email_addresses;

        return $this;
    }

    /**
     * Gets permitted_ip_ranges
     * @return \Hydra\SDK\Model\IPNet[]
     */
    public function getPermittedIpRanges()
    {
        return $this->container['permitted_ip_ranges'];
    }

    /**
     * Sets permitted_ip_ranges
     * @param \Hydra\SDK\Model\IPNet[] $permitted_ip_ranges
     * @return $this
     */
    public function setPermittedIpRanges($permitted_ip_ranges)
    {
        $this->container['permitted_ip_ranges'] = $permitted_ip_ranges;

        return $this;
    }

    /**
     * Gets permitted_uri_domains
     * @return string[]
     */
    public function getPermittedUriDomains()
    {
        return $this->container['permitted_uri_domains'];
    }

    /**
     * Sets permitted_uri_domains
     * @param string[] $permitted_uri_domains
     * @return $this
     */
    public function setPermittedUriDomains($permitted_uri_domains)
    {
        $this->container['permitted_uri_domains'] = $permitted_uri_domains;

        return $this;
    }

    /**
     * Gets policy_identifiers
     * @return \Hydra\SDK\Model\ObjectIdentifier[]
     */
    public function getPolicyIdentifiers()
    {
        return $this->container['policy_identifiers'];
    }

    /**
     * Sets policy_identifiers
     * @param \Hydra\SDK\Model\ObjectIdentifier[] $policy_identifiers
     * @return $this
     */
    public function setPolicyIdentifiers($policy_identifiers)
    {
        $this->container['policy_identifiers'] = $policy_identifiers;

        return $this;
    }

    /**
     * Gets public_key
     * @return object
     */
    public function getPublicKey()
    {
        return $this->container['public_key'];
    }

    /**
     * Sets public_key
     * @param object $public_key
     * @return $this
     */
    public function setPublicKey($public_key)
    {
        $this->container['public_key'] = $public_key;

        return $this;
    }

    /**
     * Gets public_key_algorithm
     * @return \Hydra\SDK\Model\PublicKeyAlgorithm
     */
    public function getPublicKeyAlgorithm()
    {
        return $this->container['public_key_algorithm'];
    }

    /**
     * Sets public_key_algorithm
     * @param \Hydra\SDK\Model\PublicKeyAlgorithm $public_key_algorithm
     * @return $this
     */
    public function setPublicKeyAlgorithm($public_key_algorithm)
    {
        $this->container['public_key_algorithm'] = $public_key_algorithm;

        return $this;
    }

    /**
     * Gets raw
     * @return int[]
     */
    public function getRaw()
    {
        return $this->container['raw'];
    }

    /**
     * Sets raw
     * @param int[] $raw
     * @return $this
     */
    public function setRaw($raw)
    {
        $this->container['raw'] = $raw;

        return $this;
    }

    /**
     * Gets raw_issuer
     * @return int[]
     */
    public function getRawIssuer()
    {
        return $this->container['raw_issuer'];
    }

    /**
     * Sets raw_issuer
     * @param int[] $raw_issuer
     * @return $this
     */
    public function setRawIssuer($raw_issuer)
    {
        $this->container['raw_issuer'] = $raw_issuer;

        return $this;
    }

    /**
     * Gets raw_subject
     * @return int[]
     */
    public function getRawSubject()
    {
        return $this->container['raw_subject'];
    }

    /**
     * Sets raw_subject
     * @param int[] $raw_subject
     * @return $this
     */
    public function setRawSubject($raw_subject)
    {
        $this->container['raw_subject'] = $raw_subject;

        return $this;
    }

    /**
     * Gets raw_subject_public_key_info
     * @return int[]
     */
    public function getRawSubjectPublicKeyInfo()
    {
        return $this->container['raw_subject_public_key_info'];
    }

    /**
     * Sets raw_subject_public_key_info
     * @param int[] $raw_subject_public_key_info
     * @return $this
     */
    public function setRawSubjectPublicKeyInfo($raw_subject_public_key_info)
    {
        $this->container['raw_subject_public_key_info'] = $raw_subject_public_key_info;

        return $this;
    }

    /**
     * Gets raw_tbs_certificate
     * @return int[]
     */
    public function getRawTbsCertificate()
    {
        return $this->container['raw_tbs_certificate'];
    }

    /**
     * Sets raw_tbs_certificate
     * @param int[] $raw_tbs_certificate
     * @return $this
     */
    public function setRawTbsCertificate($raw_tbs_certificate)
    {
        $this->container['raw_tbs_certificate'] = $raw_tbs_certificate;

        return $this;
    }

    /**
     * Gets serial_number
     * @return \Hydra\SDK\Model\Int
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     * @param \Hydra\SDK\Model\Int $serial_number
     * @return $this
     */
    public function setSerialNumber($serial_number)
    {
        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets signature
     * @return int[]
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     * @param int[] $signature
     * @return $this
     */
    public function setSignature($signature)
    {
        $this->container['signature'] = $signature;

        return $this;
    }

    /**
     * Gets signature_algorithm
     * @return \Hydra\SDK\Model\SignatureAlgorithm
     */
    public function getSignatureAlgorithm()
    {
        return $this->container['signature_algorithm'];
    }

    /**
     * Sets signature_algorithm
     * @param \Hydra\SDK\Model\SignatureAlgorithm $signature_algorithm
     * @return $this
     */
    public function setSignatureAlgorithm($signature_algorithm)
    {
        $this->container['signature_algorithm'] = $signature_algorithm;

        return $this;
    }

    /**
     * Gets subject
     * @return \Hydra\SDK\Model\Name
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     * @param \Hydra\SDK\Model\Name $subject
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets subject_key_id
     * @return int[]
     */
    public function getSubjectKeyId()
    {
        return $this->container['subject_key_id'];
    }

    /**
     * Sets subject_key_id
     * @param int[] $subject_key_id
     * @return $this
     */
    public function setSubjectKeyId($subject_key_id)
    {
        $this->container['subject_key_id'] = $subject_key_id;

        return $this;
    }

    /**
     * Gets ur_is
     * @return \Hydra\SDK\Model\URL[]
     */
    public function getUrIs()
    {
        return $this->container['ur_is'];
    }

    /**
     * Sets ur_is
     * @param \Hydra\SDK\Model\URL[] $ur_is
     * @return $this
     */
    public function setUrIs($ur_is)
    {
        $this->container['ur_is'] = $ur_is;

        return $this;
    }

    /**
     * Gets unhandled_critical_extensions
     * @return \Hydra\SDK\Model\ObjectIdentifier[]
     */
    public function getUnhandledCriticalExtensions()
    {
        return $this->container['unhandled_critical_extensions'];
    }

    /**
     * Sets unhandled_critical_extensions
     * @param \Hydra\SDK\Model\ObjectIdentifier[] $unhandled_critical_extensions UnhandledCriticalExtensions contains a list of extension IDs that were not (fully) processed when parsing. Verify will fail if this slice is non-empty, unless verification is delegated to an OS library which understands all the critical extensions.  Users can access these extensions using Extensions and can remove elements from this slice if they believe that they have been handled.
     * @return $this
     */
    public function setUnhandledCriticalExtensions($unhandled_critical_extensions)
    {
        $this->container['unhandled_critical_extensions'] = $unhandled_critical_extensions;

        return $this;
    }

    /**
     * Gets unknown_ext_key_usage
     * @return \Hydra\SDK\Model\ObjectIdentifier[]
     */
    public function getUnknownExtKeyUsage()
    {
        return $this->container['unknown_ext_key_usage'];
    }

    /**
     * Sets unknown_ext_key_usage
     * @param \Hydra\SDK\Model\ObjectIdentifier[] $unknown_ext_key_usage
     * @return $this
     */
    public function setUnknownExtKeyUsage($unknown_ext_key_usage)
    {
        $this->container['unknown_ext_key_usage'] = $unknown_ext_key_usage;

        return $this;
    }

    /**
     * Gets version
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     * @param int $version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Hydra\SDK\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Hydra\SDK\ObjectSerializer::sanitizeForSerialization($this));
    }
}


