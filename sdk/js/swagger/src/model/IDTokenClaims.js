/**
 * Hydra OAuth2 & OpenID Connect Server (1.0.0-aplha1)
 * Please refer to the user guide for in-depth documentation: https://ory.gitbooks.io/hydra/content/   Hydra offers OAuth 2.0 and OpenID Connect Core 1.0 capabilities as a service. Hydra is different, because it works with any existing authentication infrastructure, not just LDAP or SAML. By implementing a consent app (works with any programming language) you build a bridge between Hydra and your authentication infrastructure. Hydra is able to securely manage JSON Web Keys, and has a sophisticated policy-based access control you can use if you want to. Hydra is suitable for green- (new) and brownfield (existing) projects. If you are not familiar with OAuth 2.0 and are working on a greenfield project, we recommend evaluating if OAuth 2.0 really serves your purpose. Knowledge of OAuth 2.0 is imperative in understanding what Hydra does and how it works.   The official repository is located at https://github.com/ory/hydra   ### ATTENTION - IMPORTANT NOTE   The swagger generator used to create this documentation does currently not support example responses. To see request and response payloads click on **\"Show JSON schema\"**: ![Enable JSON Schema on Apiary](https://storage.googleapis.com/ory.am/hydra/json-schema.png)
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.HydraOAuth2OpenIdConnectServer100Aplha1) {
      root.HydraOAuth2OpenIdConnectServer100Aplha1 = {};
    }
    root.HydraOAuth2OpenIdConnectServer100Aplha1.IDTokenClaims = factory(root.HydraOAuth2OpenIdConnectServer100Aplha1.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The IDTokenClaims model module.
   * @module model/IDTokenClaims
   * @version Latest
   */

  /**
   * Constructs a new <code>IDTokenClaims</code>.
   * IDTokenClaims represent the claims used in open id connect requests
   * @alias module:model/IDTokenClaims
   * @class
   */
  var exports = function() {
    var _this = this;








  };

  /**
   * Constructs a <code>IDTokenClaims</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IDTokenClaims} obj Optional instance to populate.
   * @return {module:model/IDTokenClaims} The populated <code>IDTokenClaims</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('AccessTokenHash')) {
        obj['AccessTokenHash'] = ApiClient.convertToType(data['AccessTokenHash'], 'String');
      }
      if (data.hasOwnProperty('Audience')) {
        obj['Audience'] = ApiClient.convertToType(data['Audience'], 'String');
      }
      if (data.hasOwnProperty('CodeHash')) {
        obj['CodeHash'] = ApiClient.convertToType(data['CodeHash'], 'String');
      }
      if (data.hasOwnProperty('Extra')) {
        obj['Extra'] = ApiClient.convertToType(data['Extra'], {'String': Object});
      }
      if (data.hasOwnProperty('Issuer')) {
        obj['Issuer'] = ApiClient.convertToType(data['Issuer'], 'String');
      }
      if (data.hasOwnProperty('Nonce')) {
        obj['Nonce'] = ApiClient.convertToType(data['Nonce'], 'String');
      }
      if (data.hasOwnProperty('Subject')) {
        obj['Subject'] = ApiClient.convertToType(data['Subject'], 'String');
      }
    }
    return obj;
  }

  /**
   * @member {String} AccessTokenHash
   */
  exports.prototype['AccessTokenHash'] = undefined;
  /**
   * @member {String} Audience
   */
  exports.prototype['Audience'] = undefined;
  /**
   * @member {String} CodeHash
   */
  exports.prototype['CodeHash'] = undefined;
  /**
   * @member {Object.<String, Object>} Extra
   */
  exports.prototype['Extra'] = undefined;
  /**
   * @member {String} Issuer
   */
  exports.prototype['Issuer'] = undefined;
  /**
   * @member {String} Nonce
   */
  exports.prototype['Nonce'] = undefined;
  /**
   * @member {String} Subject
   */
  exports.prototype['Subject'] = undefined;



  return exports;
}));


